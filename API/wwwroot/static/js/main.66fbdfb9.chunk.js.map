{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhototUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNmber","pageSize","pageNumber","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","repsonseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","profile","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","creatHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","style","marginRight","src","alt","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","stackable","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","categoryOptions","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","overflowWrap","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhototUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"wZAOaA,EAIT,WAAaC,EAASC,GAAwB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAMA,EACXE,KAAKD,WAAaA,GAIbE,EAIT,aAAyC,IAA7BC,EAA4B,uDAAhB,EAAGC,EAAa,uDAAH,EAAG,yBAHxCC,gBAGwC,OAFxCD,cAEwC,EACpCH,KAAKI,WAAaF,EAClBF,KAAKG,SAAWA,GCRxBE,IAAMC,SAASC,QAAUC,OAGzBH,IAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAGXP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MAAgC,WAAMD,GAAN,eAAAC,EAAA,iFAGlBpB,EAAamB,EAASF,QAAT,YAHK,uBAKpBE,EAASpB,KAAO,IAAID,EAAgBqB,EAASpB,KAAMsB,KAAKC,MAAMtB,IAL1C,kBAMbmB,GANa,gCAQjBA,GARiB,2CAAhC,uDASE,SAACI,GACC,MAA+BA,EAAMJ,SAA9BpB,EAAP,EAAOA,KAAMyB,EAAb,EAAaA,OAAQX,EAArB,EAAqBA,OACrB,OAAOW,GACH,KAAK,IAOD,GANmB,kBAATzB,GACN0B,IAAMF,MAAMxB,GAEM,QAAlBc,EAAOa,QAAoB3B,EAAK4B,OAAOC,eAAe,OACtDC,GAAQC,KAAK,cAEb/B,EAAK4B,OAAQ,CACb,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAOjC,EAAK4B,OACf5B,EAAK4B,OAAOK,IACZD,EAAiBD,KAAK/B,EAAK4B,OAAOK,IAG1C,MAAMD,EAAiBE,OAEvBR,IAAMF,MAAMxB,GAEhB,MACJ,KAAK,IAAK0B,IAAMF,MAAM,gBAAiB,MACvC,KAAK,IACDM,GAAQC,KAAK,cACb,MACJ,KAAK,IACDf,EAAMC,YAAYkB,eAAenC,GACjC8B,GAAQC,KAAK,iBAGrB,OAAOK,QAAQC,OAAOb,MAG1B,IAAMc,EAAe,SAAIlB,GAAJ,OAAmCA,EAASpB,MAE3DuC,EACG,SAAIC,GAAJ,OAAoBjC,IAAMkC,IAAOD,GAAKE,KAAKJ,IAD9CC,EAEI,SAAIC,EAAaG,GAAjB,OAAgCpC,IAAMqC,KAAQJ,EAAIG,GAAMD,KAAKJ,IAFjEC,EAGG,SAAIC,EAAaG,GAAjB,OAAgCpC,IAAMsC,IAAOL,EAAIG,GAAMD,KAAKJ,IAH/DC,EAIM,SAAIC,GAAJ,OAAoBjC,IAAMuC,OAAUN,GAAKE,KAAKJ,IAwC3CS,EAND,CACVC,WAhCe,CACfC,KAAM,SAACC,GAAD,OAA6B3C,IAAMkC,IAAiC,cAAe,CAACS,WAASR,KAAKJ,IACxGa,QAAS,SAACC,GAAD,OAAgBb,EAAA,sBAAsCa,KAC/DC,OAAQ,SAACC,GAAD,OAAkCf,EAAA,cAAmCe,IAC7EC,OAAQ,SAACD,GAAD,OAAkCf,EAAA,sBAAkCe,EAASF,IAAME,IAC3FR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,sBAAqCa,KAC7DI,OAAQ,SAACJ,GAAD,OAAeb,EAAA,qBAAkCa,EAAlC,WAA+C,MA2BtEK,QAxBY,CACZC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAAD,OAA0BrB,EAAoB,oBAAqBqB,KAsB7EE,SAnBa,CACbrB,IAAK,SAACsB,GAAD,OAAuBxB,EAAA,oBAAmCwB,KAC/DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjB1D,IAAMqC,KAAY,SAAUsB,EAAW,CAC1ChD,QAAS,CAAC,eAAiB,0BAGnCmD,aAAc,SAACjB,GAAD,OAAgBb,EAAA,kBAAyBa,EAAzB,YAAuC,KACrEkB,YAAa,SAAClB,GAAD,OAAgBb,EAAA,kBAA2Ba,KACxDmB,gBAAiB,SAACR,GAAD,OAAqBxB,EAAA,kBAAyBwB,GAAY,KAC3ES,eAAgB,SAACT,EAAmBU,GAApB,OAA0ClC,EAAA,kBAAmCwB,EAAnC,sBAAyDU,KACnHC,eAAgB,SAACX,EAAmBU,GAApB,OAA0ClC,EAAA,oBAA0CwB,EAA1C,iCAA2EU,OCrF5HE,EACT,WAAYC,GAA4B,oBACxCC,OAAOC,OAAO5E,KAAM0E,IAGXG,EAST,WAAYzB,GAAgC,yBAR5CF,QAAc4B,EAQ6B,KAP3CC,MAAgB,GAO2B,KAN3CC,SAAmB,GAMwB,KAL3CC,YAAsB,GAKqB,KAJ3CC,KAAoB,KAIuB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGRhC,IACApD,KAAKkD,GAAKE,EAASF,GACnBlD,KAAK+E,MAAQ3B,EAAS2B,MACtB/E,KAAKgF,SAAW5B,EAAS4B,SACzBhF,KAAKiF,YAAc7B,EAAS6B,YAC5BjF,KAAKkF,KAAO9B,EAAS8B,KACrBlF,KAAKoF,MAAQhC,EAASgC,MACtBpF,KAAKmF,KAAO/B,EAAS+B,OC5BpBE,EACT,WAAY3B,GAAc,oBACtB1D,KAAK6D,SAAWH,EAAKG,SACrB7D,KAAKsF,YAAc5B,EAAK4B,YACxBtF,KAAKuF,MAAQ7B,EAAK6B,OCTLC,E,WAUjB,aAAe,IAAD,gCATdC,iBAAmB,IAAIC,IAST,KARdC,sBAAyCb,EAQ3B,KAPdc,UAAW,EAOG,KANdC,SAAU,EAMI,KALdC,gBAAiB,EAKH,KAJd/F,WAAgC,KAIlB,KAHdgG,aAAe,IAAI9F,EAGL,KAFdsE,WAAY,IAAImB,KAAMM,IAAI,OAAO,GAEnB,KAadC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GAdV,KAiBdG,aAAe,SAAC3B,EAAmB4B,GAC/B,IAAMC,EAAiB,WACnB,EAAK7B,UAAU8B,SAAQ,SAACF,EAAOpE,GACf,cAARA,GAAqB,EAAKwC,UAAU3B,OAAOb,OAGvD,OAAQwC,GACJ,IAAK,MACD6B,IACA,EAAK7B,UAAUyB,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAK7B,UAAUyB,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAK7B,UAAUyB,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAKzB,UAAU3B,OAAO,aACtB,EAAK2B,UAAUyB,IAAI,YAAaG,KAtC9B,KA0EdG,eA1Ec,sBA0EG,4BAAAnF,EAAA,6DACb,EAAK2E,gBAAiB,EADT,kBAGYjD,EAAMC,WAAWC,KAAK,EAAKwD,aAHvC,QAGHC,EAHG,QAIF1G,KAAKuG,SAAQ,SAAAjD,GAChB,EAAKqD,YAAYrD,MAErB,EAAKsD,cAAcF,EAAOzG,YAC1B,EAAK4G,mBAAkB,GARd,kDAUbC,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAXV,0DA1EH,KA0FdD,cAAgB,SAAC3G,GACb,EAAKA,WAAaA,GA3FR,KA8Fd+G,aA9Fc,uCA8FC,WAAO5D,GAAP,eAAA/B,EAAA,2DACPiC,EAAW,EAAK2D,YAAY7D,IADrB,uBAGP,EAAKyC,iBAAmBvC,EAHjB,kBAIAA,GAJA,cAMP,EAAK0C,gBAAiB,EANf,mBAQcjD,EAAMC,WAAWG,QAAQC,GARvC,eAQHE,EARG,OASH,EAAKqD,YAAYrD,GACjB4D,aAAY,WACR,EAAKrB,iBAAmBvC,KAE5B,EAAKuD,mBAAkB,GAbpB,kBAcIvD,GAdJ,kCAgBHwD,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAjBpB,0DA9FD,2DAoHNI,YAAc,SAAC7D,GACnB,OAAO,EAAKuC,iBAAiBlD,IAAIW,IArHvB,KAwHNuD,YAAc,SAACrD,GACnB,IACU,EADJM,EAAO5C,EAAMmG,UAAUvD,KACzBA,IACAN,EAAS8D,QAAU9D,EAAS+D,UAAWC,MACnC,SAAAjG,GAAC,OAAIA,EAAE0C,WAAaH,EAAKG,YAE7BT,EAASiE,OAASjE,EAASkE,eAAiB5D,EAAKG,SACjDT,EAASmE,KAAT,UAAgBnE,EAAS+D,iBAAzB,aAAgB,EAAoBK,MAAM,SAAAC,GAAC,OAAIA,EAAE5D,WAAaT,EAASkE,iBAE3ElE,EAAS8B,KAAO,IAAIwC,KAAKtE,EAAS8B,MAClC,EAAKO,iBAAiBO,IAAI5C,EAASF,GAAIE,IAlI7B,KAqIduD,kBAAoB,SAACgB,GACjB,EAAK7B,eAAiB6B,GAtIZ,KAyIdC,eAzIc,uCAyIG,WAAOxE,GAAP,mBAAAjC,EAAA,6DACPuC,EAAO5C,EAAMmG,UAAUvD,KACvBmE,EAAY,IAAIxC,EAAQ3B,GAFjB,kBAIHb,EAAMC,WAAWK,OAAOC,GAJrB,QAKH0E,EAAc,IAAIrD,EAASrB,IACrBkE,aAAe5D,EAAMG,SACjCiE,EAAYX,UAAY,CAACU,GACzB,EAAKpB,YAAYqB,GACjBd,aAAY,WACR,EAAKrB,iBAAmBmC,KAVnB,kDAaTlB,QAAQC,IAAR,MAbS,0DAzIH,2DA0JdkB,eA1Jc,uCA0JG,WAAO3E,GAAP,SAAAjC,EAAA,+EAEH0B,EAAMC,WAAWO,OAAOD,GAFrB,OAGT4D,aAAY,WACR,GAAG5D,EAASF,GAAG,CACX,IAAI8E,EAAe,2BAAO,EAAKjB,YAAY3D,EAASF,KAAOE,GAC3D,EAAKqC,iBAAiBO,IAAI5C,EAASF,GAAI8E,GACvC,EAAKrC,iBAAmBqC,MAPvB,+CAWTpB,QAAQC,IAAR,MAXS,wDA1JH,2DAyKdoB,eAzKc,uCAyKG,WAAQ/E,GAAR,SAAA/B,EAAA,6DACb,EAAK0E,SAAU,EADF,kBAGHhD,EAAMC,WAAWF,OAAOM,GAHrB,OAIT8D,aAAY,WACR,EAAKvB,iBAAiB7C,OAAOM,GAC7B,EAAK2C,SAAU,KANV,gDASTe,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKnB,SAAU,KAXV,yDAzKH,2DAyLdqC,iBAzLc,sBAyLK,4BAAA/G,EAAA,6DACTuC,EAAO5C,EAAMmG,UAAUvD,KAC7B,EAAKmC,SAAU,EAFA,kBAILhD,EAAMC,WAAWQ,OAAO,EAAKqC,iBAAkBzC,IAJ1C,OAKX8D,aAAY,WAAO,IAAD,EACd,aAAI,EAAKrB,wBAAT,aAAI,EAAuBuB,QAAS,CAAC,IAAD,EAChC,EAAKvB,iBAAiBwB,UAAtB,UAAkC,EAAKxB,iBAAiBwB,iBAAxD,aAAkC,EAAiCgB,QAAQ,SAAAhH,GAAC,OAAIA,EAAE0C,YAAF,OAAeH,QAAf,IAAeA,OAAf,EAAeA,EAAMG,aACrG,EAAK8B,iBAAiBuB,SAAU,MAC7B,CAAC,IAAD,IACGW,EAAW,IAAIxC,EAAQ3B,GAC7B,YAAKiC,wBAAL,mBAAuBwB,iBAAvB,SAAkCtF,KAAKgG,GACvC,EAAKlC,iBAAkBuB,SAAU,EAErC,EAAKzB,iBAAiBO,IAAI,EAAKL,iBAAkBzC,GAAI,EAAKyC,qBAdnD,gDAiBXiB,QAAQC,IAAR,MAjBW,yBAmBXG,aAAY,kBAAM,EAAKnB,SAAU,KAnBtB,4EAzLL,KAgNduC,qBAhNc,sBAgNS,sBAAAjH,EAAA,6DACnB,EAAK0E,SAAU,EADI,kBAGThD,EAAMC,WAAWQ,OAAO,EAAKqC,iBAAkBzC,IAHtC,OAIf8D,aAAY,WAAO,IAAD,EACd,EAAKrB,iBAAkB0C,cAAc,UAAC,EAAK1C,wBAAN,aAAC,EAAuB0C,aAC7D,EAAK5C,iBAAiBO,IAAI,EAAKL,iBAAkBzC,GAAK,EAAKyC,qBANhD,gDASfiB,QAAQC,IAAR,MATe,yBAWfG,aAAa,kBAAM,EAAKnB,SAAU,KAXnB,4EAhNT,KA+NdyC,wBAA0B,SAACzE,GACvB,EAAK4B,iBAAiBY,SAAQ,SAAAjD,GAC1BA,EAAS+D,UAAUd,SAAQ,SAAAwB,GACnBA,EAAShE,WAAaA,IACtBgE,EAASU,UAAYV,EAASW,iBAAmBX,EAASW,iBAC1DX,EAASU,WAAaV,EAASU,kBApOjC,KA0OdE,sBAAwB,WACpB,EAAK9C,sBAAmBb,GA1OxB4D,YAAmB1I,MAEnB2I,aACI,kBAAM,EAAKpE,UAAUqE,UACrB,WACI,EAAK7C,aAAe,IAAI9F,EACxB,EAAKwF,iBAAiBoD,QACtB,EAAKvC,oB,6CAmCjB,WACI,IAAMtD,EAAS,IAAI8F,gBAUnB,OATA9F,EAAOkB,OAAO,aAAclE,KAAK+F,aAAa3F,WAAW2I,YACzD/F,EAAOkB,OAAO,WAAYlE,KAAK+F,aAAa5F,SAAS4I,YACrD/I,KAAKuE,UAAU8B,SAAQ,SAACF,EAAOpE,GAChB,cAARA,EACCiB,EAAOkB,OAAOnC,EAAMoE,EAAe6C,eAEnChG,EAAOkB,OAAOnC,EAAKoE,MAGpBnD,I,4BAGX,WACI,OAAOiG,MAAMC,KAAKlJ,KAAKyF,iBAAiB0D,UAAUC,MAAK,SAACjI,EAAIkI,GAAL,OACvDlI,EAAE+D,KAAMoE,UAAYD,EAAEnE,KAAMoE,e,6BAGhC,WACI,OAAO3E,OAAO4E,QACVvJ,KAAKwJ,iBAAiBC,QAAO,SAACC,EAAYtG,GACtC,IAAM8B,EAAOyE,kBAAOvG,EAAS8B,KAAO,eAEpC,OADAwE,EAAWxE,GAAQwE,EAAWxE,GAAX,sBAAuBwE,EAAWxE,IAAlC,CAAyC9B,IAAY,CAACA,GAClEsG,IACR,S,KCjFME,E,WAWjB,aAAe,IAAD,gCAVdC,QAA2B,KAUb,KATdC,gBAAiB,EASH,KARdC,WAAY,EAQE,KAPdlE,SAAU,EAOI,KANdmE,WAAyB,GAMX,KALdC,mBAAoB,EAKN,KAJdC,UAAY,EAIE,KAHdC,eAAiC,GAGnB,KAFdC,mBAAoB,EAEN,KAgBdC,aAAe,SAACH,GACZ,EAAKA,UAAYA,GAjBP,KA2BdI,YA3Bc,uCA2BA,WAAOzG,GAAP,eAAA1C,EAAA,6DACV,EAAK2I,gBAAiB,EADZ,kBAGkBjH,EAAMe,SAASrB,IAAIsB,GAHrC,OAGAgG,EAHA,OAIN7C,aAAY,WACR,EAAK6C,QAAUA,EACf,EAAKC,gBAAiB,KANpB,gDASN9C,aAAY,kBAAM,EAAK8C,gBAAiB,KACxClD,QAAQC,IAAR,MAVM,yDA3BA,2DAyCd/C,YAzCc,uCAyCA,WAAOC,GAAP,iBAAA5C,EAAA,6DACV,EAAK4I,WAAY,EADP,kBAGiBlH,EAAMe,SAASE,YAAYC,GAH5C,OAGA7C,EAHA,OAIAqJ,EAAQrJ,EAASpB,KACvBkH,aAAY,WACW,IAAD,EAAd,EAAK6C,UACL,YAAKA,QAAQW,cAAb,SAAqB3I,KAAK0I,GACtBA,EAAME,QAAU3J,EAAMmG,UAAUvD,OAChC5C,EAAMmG,UAAUyD,SAASH,EAAMjI,KAC/B,EAAKuH,QAAQtE,MAAQgF,EAAMjI,MAGnC,EAAKyH,WAAY,KAbf,gDAgBNnD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK+C,WAAY,KAjB7B,yDAzCA,2DA8Dd5F,aA9Dc,uCA8DC,WAAOoG,GAAP,SAAApJ,EAAA,6DACX,EAAK0E,SAAU,EADJ,kBAGDhD,EAAMe,SAASO,aAAaoG,EAAMrH,IAHjC,OAIPpC,EAAMmG,UAAUyD,SAASH,EAAMjI,KAC/B0E,aAAY,WACJ,EAAK6C,SAAW,EAAKA,QAAQW,SAE7B,EAAKX,QAAQW,OAAOhD,MAAK,SAAAmD,GAAC,OAAIA,EAAEF,UAASA,QAAS,EAElD,EAAKZ,QAAQW,OAAOhD,MAAK,SAAAmD,GAAC,OAAIA,EAAEzH,KAAOqH,EAAMrH,MAAKuH,QAAS,EAC3D,EAAKZ,QAAQtE,MAAQgF,EAAMjI,IAC3B,EAAKuD,SAAU,MAZhB,gDAgBPmB,aAAY,kBAAM,EAAKnB,SAAU,KACjCe,QAAQC,IAAR,MAjBO,yDA9DD,2DAmFdzC,YAnFc,uCAmFA,WAAOmG,GAAP,SAAApJ,EAAA,6DACV,EAAK0E,SAAU,EADL,kBAGAhD,EAAMe,SAASQ,YAAYmG,EAAMrH,IAHjC,OAIN8D,aAAY,WACW,IAAD,EAAd,EAAK6C,UACL,EAAKA,QAAQW,OAAb,UAAsB,EAAKX,QAAQW,cAAnC,aAAsB,EAAqBrC,QAAO,SAAAwC,GAAC,OAAIA,EAAEzH,KAAOqH,EAAMrH,MACtE,EAAK2C,SAAU,MAPjB,gDAWNmB,aAAY,kBAAM,EAAKnB,SAAU,KACjCe,QAAQC,IAAR,MAZM,yDAnFA,2DAmGdxC,gBAnGc,uCAmGI,WAAOR,EAAkB0E,GAAzB,SAAApH,EAAA,6DACd,EAAK0E,SAAU,EADD,kBAGJhD,EAAMe,SAASS,gBAAgBR,GAH3B,OAIV/C,EAAM8J,cAActC,wBAAwBzE,GAC5CmD,aAAY,WAAO,IAAD,IACV,EAAK6C,SAAW,EAAKA,QAAQhG,YAAb,UAA0B/C,EAAMmG,UAAUvD,YAA1C,aAA0B,EAAsBG,WAAY,EAAKgG,QAAQhG,WAAaA,IACtG0E,EAAY,EAAKsB,QAAQrB,iBAAmB,EAAKqB,QAAQrB,iBACzD,EAAKqB,QAAQtB,WAAa,EAAKsB,QAAQtB,WAExC,EAAKsB,SAAW,EAAKA,QAAQhG,YAAb,UAA0B/C,EAAMmG,UAAUvD,YAA1C,aAA0B,EAAsBG,YAC/D0E,EAAY,EAAKsB,QAAQgB,iBAAmB,EAAKhB,QAAQgB,kBAE7D,EAAKb,WAAW3D,SAAQ,SAAAwD,GAChBA,EAAQhG,WAAaA,IACrBgG,EAAQtB,UAAYsB,EAAQrB,iBAAmBqB,EAAQrB,iBACvDqB,EAAQtB,WAAasB,EAAQtB,cAGrC,EAAK1C,SAAW,KAnBV,gDAsBVe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAvBvB,yDAnGJ,6DA8HdiF,eA9Hc,uCA8HG,WAAOvG,GAAP,eAAApD,EAAA,6DACb,EAAK8I,mBAAoB,EADZ,kBAGgBpH,EAAMe,SAASU,eAAe,EAAKuF,QAAShG,SAAUU,GAHtE,OAGHyF,EAHG,OAIThD,aAAY,WACR,EAAKgD,WAAaA,EAClB,EAAKC,mBAAoB,KANpB,gDASTrD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKiD,mBAAoB,KAVlC,yDA9HH,2DA4Idc,mBA5Ic,uCA4IO,WAAOlH,EAAiBU,GAAxB,eAAApD,EAAA,6DACjB,EAAKiJ,mBAAoB,EADR,kBAGYvH,EAAMe,SAASY,eAAeX,EAAUU,GAHpD,OAGPmF,EAHO,OAIb1C,aAAY,WACR,EAAKmD,eAAiBT,EACtB,EAAKU,mBAAoB,KANhB,gDASbxD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKoD,mBAAoB,KAV9B,yDA5IP,wDACV1B,YAAmB1I,MAEnB2I,aACI,kBAAM,EAAKuB,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAM3F,EAA+B,IAAnB,EAAK2F,UAAkB,YAAc,YACvD,EAAKY,eAAevG,QAEpB,EAAKyF,WAAa,M,+CAUlC,WACI,SAAGlJ,EAAMmG,UAAUvD,OAAQ1D,KAAK6J,UACrB/I,EAAMmG,UAAUvD,KAAKG,WAAa7D,KAAK6J,QAAQhG,a,KCjC7CmH,E,WAGjB,aAAe,IAAD,gCAFdtH,KAAqB,KAEP,KAQdD,MARc,uCAQN,WAAOwH,GAAP,eAAA9J,EAAA,+EAEmB0B,EAAMU,QAAQE,MAAMwH,GAFvC,OAEMvH,EAFN,OAGA5C,EAAMC,YAAYmK,SAASxH,EAAK7C,OAChCmG,aAAY,kBAAM,EAAKtD,KAAOA,KAC9B9B,GAAQC,KAAK,eACbf,EAAMqK,WAAWC,aANjB,uHARM,2DAoBdC,OAAS,WACLvK,EAAMC,YAAYmK,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAK9H,KAAO,KACZ9B,GAAQC,KAAK,MAxBH,KA2Bd4J,QA3Bc,sBA2BJ,4BAAAtK,EAAA,+EAEiB0B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGFsD,aAAa,kBAAM,EAAKtD,KAAOA,KAH7B,gDAKFkD,QAAQC,IAAR,MALE,yDA3BI,KAoCdlD,SApCc,uCAoCH,WAAOsH,GAAP,eAAA9J,EAAA,+EAEgB0B,EAAMU,QAAQI,SAASsH,GAFvC,OAEGvH,EAFH,OAGH5C,EAAMC,YAAYmK,SAASxH,EAAK7C,OAChCmG,aAAY,kBAAM,EAAKtD,KAAOA,KAC9B9B,GAAQC,KAAK,eACbf,EAAMqK,WAAWC,aANd,uHApCG,2DAgDdV,SAAW,SAACnF,GACJ,EAAK7B,OAAM,EAAKA,KAAK6B,MAAQA,IAhDjCmD,YAAmB1I,M,4CAGvB,WACI,QAAUA,KAAK0D,S,cCIV5C,EAAe,CACxB8J,cAAe,IAAIpF,EACnBzE,YAAa,ICXb,aAAe,IAAD,gCAJdO,MAA4B,KAId,KAHdT,MAAuByK,OAAOC,aAAaG,QAAQ,OAGrC,KAFdC,WAAY,EAEE,KAgBd1J,eAAiB,SAACX,GACd,EAAKA,MAAQA,GAjBH,KAoBd4J,SAAW,SAACrK,GAGR,EAAKA,MAAQA,GAvBH,KA0Bd+K,aAAe,WACX,EAAKD,WAAY,GA1BjBjD,YAAmB1I,MAGnB2I,aACI,kBAAM,EAAK9H,SACX,SAAAA,GACQA,EACAyK,OAAOC,aAAaM,QAAQ,MAAOhL,GAEnCyK,OAAOC,aAAaC,WAAW,WDE/CvE,UAAW,IAAI+D,EACfG,WAAY,IERZ,aAAe,IAAD,gCALdW,MAAgB,CACZC,MAAO,EACPtJ,KAAO,MAGG,KAIduJ,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMrJ,KAAOwJ,GANR,KASdb,WAAa,WACT,EAAKU,MAAMC,MAAO,EAClB,EAAKD,MAAMrJ,KAAO,MAVlBiG,YAAmB1I,OFQvBkM,aAAc,IAAItC,EAClBuC,aAAc,IGbd,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAuC,KAEzB,KAIdC,mBAAqB,SAACC,GACfzL,EAAM8J,cAAcjF,mBACnB,EAAK0G,eAAgB,IAAIG,KACpBC,QAAQjM,oBAAkD+L,EAAY,CACnEG,mBAAoB,kCAAM5L,EAAMmG,UAAUvD,YAAtB,aAAM,EAAsB7C,SAEnD8L,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,cAAcW,QAAQC,OAAM,SAAA3L,GAAK,OAAIsF,QAAQC,IAAI,oCAAqCvF,MAE3F,EAAK+K,cAAca,GAAG,gBAAgB,SAACd,GACnCpF,aAAY,WACRoF,EAAS/F,SAAQ,SAAA8G,GACbA,EAAQC,UAAY,IAAI1F,KAAKyF,EAAQC,UAAW,QAEpD,EAAKhB,SAAWA,QAIxB,EAAKC,cAAca,GAAG,kBAAkB,SAACC,GACrCnG,aAAY,WACRmG,EAAQC,UAAY,IAAI1F,KAAKyF,EAAQC,WACrC,EAAKhB,SAASiB,QAAQF,WA5BxB,KAiCdG,kBAAoB,WAAO,IAAD,EACtB,YAAKjB,qBAAL,SAAoBkB,OAAON,OAAM,SAAA3L,GAAK,OAAIsF,QAAQC,IAAI,4BAA6BvF,OAlCzE,KAqCdkM,cAAgB,WACZ,EAAKpB,SAAW,GAChB,EAAKkB,qBAvCK,KA0CdG,WA1Cc,uCA0CD,WAAOtE,GAAP,iBAAAhI,EAAA,6DACTgI,EAAOoD,WAAP,UAAoBzL,EAAM8J,cAAcjF,wBAAxC,aAAoB,EAAsCzC,GADjD,4BAGC,EAAKmJ,qBAHN,aAGC,EAAoBqB,OAAO,cAAevE,GAH3C,sDAKLvC,QAAQC,IAAR,MALK,wDA1CC,sDACV6B,YAAmB1I,QHed2N,EAAeC,wBAAc9M,GAGnC,SAAS+M,IACZ,OAAOC,qBAAWH,G,WIQPI,eAhCA,WAEX,MAAsCF,IAA/B5G,UAAcvD,EAArB,EAAqBA,KAAM2H,EAA3B,EAA2BA,OAE3B,OACI,cAAC2C,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,OAAK,EAACC,QAAM,EAA3C,UACI,qBAAKC,MAAO,CAACC,YAAY,QAASC,IAAI,mBAAmBC,IAAI,SADjE,kBAIA,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,cAAcO,KAAK,eAE9C,cAACd,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,UAAUO,KAAK,WAE1C,cAACd,EAAA,EAAKI,KAAN,CAAWK,QAAM,EAAjB,SACI,cAACM,EAAA,EAAD,CAAQV,GAAIC,IAASC,GAAG,kBAAkBS,UAAQ,EAAC/C,QAAQ,sBAE/D,eAAC+B,EAAA,EAAKI,KAAN,CAAWa,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAON,KAAW,OAAJlL,QAAI,IAAJA,OAAA,EAAAA,EAAM6B,QAAS,mBAAoB4J,QAAM,EAACC,OAAO,UAC/D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAE7L,QAAF,IAAEA,OAAF,EAAEA,EAAM4B,YAA1C,SACI,eAAC+J,EAAA,EAASrB,KAAV,WACI,cAACqB,EAAA,EAASjB,KAAV,CAAeC,GAAImB,IAAMjB,GAAE,2BAAe7K,QAAf,IAAeA,OAAf,EAAeA,EAAMG,UAAY0L,KAAK,aAAaE,KAAK,SACnF,cAACJ,EAAA,EAASjB,KAAV,CAAesB,QAASrE,EAAQkE,KAAK,UAAUE,KAAK,0B,8DCUjE1B,eAjCS,WAEpB,MAAmDF,IAA5CjD,cAAgBrG,EAAvB,EAAuBA,UAAW2B,EAAlC,EAAkCA,aAElC,OACI,qCACI,eAAC8H,EAAA,EAAD,CAAM2B,UAAQ,EAACC,KAAK,QAAQlB,MAAO,CAACmB,MAAM,OAAQC,UAAU,IAA5D,UACI,cAACC,EAAA,EAAD,CAAQN,KAAK,SAASO,UAAQ,EAACC,MAAM,OAAOhE,QAAQ,YACpD,cAAC+B,EAAA,EAAKI,KAAN,CACInC,QAAQ,iBACRiE,OAAQ3L,EAAU4L,IAAI,OACtBT,QAAS,kBAAMxJ,EAAa,MAAO,WAEvC,cAAC8H,EAAA,EAAKI,KAAN,CACInC,QAAQ,YACRiE,OAAQ3L,EAAU4L,IAAI,WACtBT,QAAS,kBAAMxJ,EAAa,UAAW,WAE3C,cAAC8H,EAAA,EAAKI,KAAN,CACInC,QAAQ,cACRiE,OAAQ3L,EAAU4L,IAAI,UACtBT,QAAS,kBAAMxJ,EAAa,SAAU,cAG9C,cAAC6J,EAAA,EAAD,IACA,cAAC,IAAD,CACIK,SAAU,SAAClL,GAAD,OAAgBgB,EAAa,YAAahB,IACpDiB,MAAQ5B,EAAUhC,IAAI,cAAgB,IAAImF,a,8ECY3CqG,gBAnCM,SAAC,GAAuB,IAAD,EAArBlE,EAAqB,EAArBA,QAEnB,EAAmCgE,IAA5B3B,EAAP,EAAOA,aAAcjF,EAArB,EAAqBA,UACd5C,EAA6B6H,EAA7B7H,gBAAiBwB,EAAYqG,EAAZrG,QAGxB,IAAI,UAAAoB,EAAUvD,YAAV,eAAgBG,YAAagG,EAAQhG,SAAU,OAAO,KAO1D,OACI,eAACwM,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAAC9B,MAAQ,CAACmB,MAAM,QAAvC,SACI,cAACd,EAAA,EAAD,CACI0B,OAAK,EACLR,MAAM,OACNhE,QAASpC,EAAQtB,UAAY,YAAc,oBAEnD,cAAC8H,GAAA,EAAOE,QAAR,CAAgBG,QAAM,EAAChC,MAAQ,CAACmB,MAAM,QAAtC,SACI,cAACd,EAAA,EAAD,CACI0B,OAAK,EACLE,OAAK,EACLV,MAAOpG,EAAQtB,UAAY,MAAQ,QACnC0D,QAASpC,EAAQtB,UAAY,WAAa,SAC1C1C,QAASA,EACT6J,QAAS,SAACkB,GAAD,OApBzB,SAAuBA,EAAoB/M,GACvC+M,EAAEC,iBACFhH,EAAQtB,UAAYlE,EAAgBR,GAAU,GAASQ,EAAgBR,GAAU,GAkBrDiN,CAAaF,EAAG/G,EAAQhG,qBCV7CkK,gBAjBK,SAAC,GAAuB,IAAtBlE,EAAqB,EAArBA,QAClB,OACI,eAACkH,GAAA,EAAD,CAAM1C,GAAImB,IAAMjB,GAAE,oBAAe1E,EAAQhG,UAAzC,UACI,cAACqL,EAAA,EAAD,CAAON,IAAK/E,EAAQtE,OAAR,qBACZ,eAACwL,GAAA,EAAKR,QAAN,WACI,cAACQ,GAAA,EAAKhB,OAAN,UAAclG,EAAQvE,cACtB,cAACyL,GAAA,EAAKC,YAAN,+BAEJ,eAACD,GAAA,EAAKR,QAAN,WACI,cAACU,GAAA,EAAD,CAAMnC,KAAK,SACVjF,EAAQrB,eAFb,gBAIA,cAAC,GAAD,CAAcqB,QAASA,UCsBpBkE,gBAlCkB,SAAC,GAA6B,IAA1B5G,EAAyB,EAAzBA,UAE3B+J,EAAS,CACXC,YAAY,SACZC,YAAY,GAGhB,OACI,cAACC,GAAA,EAAD,CAAMC,YAAU,EAAhB,SACMnK,EAAUoK,KAAK,SAAA1J,GAAQ,OACrB,cAAC2J,GAAA,EAAD,CACIC,WAAS,EAETC,QACI,cAACL,GAAA,EAAKjD,KAAN,CAAmCC,GAAImB,IAAMjB,GAAE,oBAAe1G,EAAShE,UAAvE,SACI,cAACqL,EAAA,EAAD,CACIU,KAAK,OACL+B,UAAQ,EAAC/C,IAAM/G,EAAStC,OAAS,mBACjCqM,UAAQ,EACRlD,MAAO7G,EAASU,UAAY2I,EAAS,QAL7BrJ,EAAShE,UAJjC,SAcI,cAAC2N,GAAA,EAAMjB,QAAP,UACI,cAAC,GAAD,CAAa1G,QAAShC,OAbrBA,EAAShE,kBC4CnBgO,GAzDU,SAAC,GAA0B,IAAD,IAAvBzO,EAAuB,EAAvBA,SAExB,OACI,eAAC0O,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,WACK1O,EAASiF,aACN,cAAC2J,GAAA,EAAD,CAAOhC,SAAS,MAAMC,MAAM,MAAMhE,QAAQ,YAAYyC,MAAO,CAACuD,UAAW,YAE7E,cAAC7D,GAAA,EAAK2D,MAAN,UACI,eAAC3D,GAAA,EAAD,WACI,cAACA,GAAA,EAAKc,MAAN,CAAYR,MAAO,CAACwD,aAAc,GAAItC,KAAK,OAAO+B,UAAQ,EAAC/C,KAAK,UAAAxL,EAASmE,YAAT,eAAehC,QAAS,oBACxF,eAAC6I,GAAA,EAAKmC,QAAN,WACI,cAACnC,GAAA,EAAK2B,OAAN,CAAa1B,GAAImB,IAAMjB,GAAE,qBAAgBnL,EAASF,IAAlD,SAAyDE,EAAS2B,QAClE,eAACqJ,GAAA,EAAK4C,YAAN,wBACc,cAAC,IAAD,CAAMzC,GAAE,mBAAcnL,EAASkE,cAA/B,mBAAgDlE,EAASmE,YAAzD,aAAgD,EAAejC,iBAE5ElC,EAASiE,QACN,cAAC+G,GAAA,EAAK4C,YAAN,UACI,cAACgB,GAAA,EAAD,CAAOrB,OAAK,EAACV,MAAM,SAAnB,6CAKP7M,EAAS8D,UAAY9D,EAASiE,QAC3B,cAAC+G,GAAA,EAAK4C,YAAN,UACI,cAACgB,GAAA,EAAD,CAAOrB,OAAK,EAACV,MAAM,QAAnB,sDASxB,cAAC6B,EAAA,EAAD,UACI,iCACI,cAACb,GAAA,EAAD,CAAMnC,KAAK,UADf,IAC2BnF,kBAAOvG,EAAS8B,KAAQ,wBAC/C,cAAC+L,GAAA,EAAD,CAAMnC,KAAK,WAFf,IAE4B1L,EAASgC,WAGzC,cAAC0M,EAAA,EAAD,CAASK,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0BhL,UAAW/D,EAAS+D,cAElD,eAAC2K,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,+BAAOhP,EAAS6B,cAChB,cAAC8J,EAAA,EAAD,CACIV,GAAImB,IACJjB,GAAE,qBAAgBnL,EAASF,IAC3B+M,MAAM,OACNoC,QAAQ,QACRpG,QAAQ,gBCpCb8B,gBAlBM,WACjB,IACQuE,EADgBzE,IAAjBjD,cACC0H,kBAER,OACI,mCACKA,EAAkBf,KAAI,mCAAEgB,EAAF,KAAQ7I,EAAR,YACnB,eAAC,WAAD,WACI,cAACqG,EAAA,EAAD,CAAQyC,KAAG,EAACvC,MAAM,OAAlB,SAA0BsC,IACrB7I,EAAW6H,KAAI,SAAAnO,GAAQ,OACpB,cAAC,GAAD,CAAoCA,SAAUA,GAAvBA,EAASF,SAH7BqP,W,UCVhB,SAASE,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAajC,OAAK,EAAC/B,MAAO,CAAEoB,UAAW,IAAvC,SACI,eAACgC,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAASpD,MAAO,CAAEiE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAY3C,OAAb,CAAoBxK,OAAK,EAAzB,UACI,cAACmN,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACd,EAAA,EAAD,UACI,eAACY,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACd,EAAA,EAAD,CAASK,WAAS,EAACzD,MAAO,CAAEiE,UAAW,MACvC,cAACb,EAAA,EAAD,CAASM,UAAQ,EAAjB,SACI,cAACrD,EAAA,EAAD,CAAQ+D,UAAQ,EAAC7C,MAAM,OAAOoC,QAAQ,QAAQpG,QAAQ,kBCjB9E,IAgDe8B,gBAhDW,WAEtB,IAAOnD,EAAiBiD,IAAjBjD,cACAtE,EAAiEsE,EAAjEtE,eAAgBb,EAAiDmF,EAAjDnF,iBAAkBQ,EAA+B2E,EAA/B3E,gBAAiBlG,EAAc6K,EAAd7K,WAC1D,EAAsCgT,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAcA,OANAC,qBAAU,WACHzN,EAAiBmK,MAAQ,GAC5BtJ,MACD,CAACb,EAAiBmK,KAAMtJ,IAInB,eAAC6M,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACD,EAAA,EAAKE,OAAN,CAAaxD,MAAM,KAAnB,SAEKjF,EAAc9E,iBAAmBkN,EAC9B,qCACI,cAACP,GAAD,IACA,cAACA,GAAD,OAGJ,cAAC,IAAD,CACIa,UAAW,EACXC,SAxBxB,WACIN,GAAe,GACfhN,EAAgB,IAAIhG,EAAaF,EAAYyT,YAAc,IAC3DlN,IAAiB9D,MAAK,kBAAMyQ,GAAe,OAsBvBQ,SAAUT,KAAiBjT,GAAcA,EAAWyT,YAAczT,EAAW2T,WAC7EC,aAAa,EAJjB,SAMA,cAAC,GAAD,QAIR,cAACR,EAAA,EAAKE,OAAN,CAAaxD,MAAM,IAAnB,SACI,cAAC,EAAD,MAEJ,cAACsD,EAAA,EAAKE,OAAN,CAAaxD,MAAM,KAAnB,SACI,cAAC+D,EAAA,EAAD,CAAQ1D,OAAQ8C,Y,mBCzBrBa,GAhBK,SAACC,GACjB,MAAsBC,aAASD,EAAMhF,MAArC,mBAAOkF,EAAP,KAAcC,EAAd,KAEA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY7S,MAAO2S,EAAKG,WAAaH,EAAK3S,MAA1C,UACI,gCAAQwS,EAAMO,QAEd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAK3S,MAClB,cAAC0Q,GAAA,EAAD,CAAOrB,OAAK,EAACV,MAAM,MAAnB,SAA0BgE,EAAK3S,QAChC,SCUAyM,gBAvBG,WACd,IAAO9G,EAAa4G,IAAb5G,UAEP,OACI,cAAC,KAAD,CACIqN,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAIlT,MAAO,MACjDmT,SAAU,SAACtL,EAAD,OAAUuL,EAAV,EAAUA,UAAV,OAAyBzN,EAAUxD,MAAM0F,GAAQ8D,OAAM,SAAA3L,GAAK,OAAIoT,EAAU,CAACpT,MAAO,kCAFhG,SAIK,gBAAGqT,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAclT,EAA/B,EAA+BA,OAA/B,OACG,eAAC,KAAD,CAAMmT,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAAC/E,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,wBAAwBgE,MAAM,OAAOgC,UAAU,WACvE,cAAC,GAAD,CAAanD,KAAK,QAAQiG,YAAY,UACtC,cAAC,GAAD,CAAajG,KAAK,WAAWkG,KAAK,WAAWD,YAAY,aACzD,cAAC,KAAD,CACIjG,KAAK,QAAQmG,OAAQ,kBAAM,cAACjD,GAAA,EAAD,CAAOtD,MAAO,CAACwD,aAAc,IAAKvB,OAAK,EAACV,MAAM,MAAMhE,QAASvK,EAAOJ,WAEnG,cAACyN,EAAA,EAAD,CAAQlJ,QAAS+O,EAAc5F,UAAQ,EAAC/C,QAAQ,QAAQ+I,KAAK,SAASvE,OAAK,a,mBCJhFyE,GAdU,SAAC,GAAqB,IAApBxT,EAAmB,EAAnBA,OACvB,OACI,cAACyT,GAAA,EAAD,CAAS7T,OAAK,EAAd,SACKI,GACG,cAACyT,GAAA,EAAQ9D,KAAT,UACK3P,EAAO6P,KAAI,SAAC6D,EAAUC,GAAX,OACR,cAACF,GAAA,EAAQ/G,KAAT,UAAuBgH,GAAJC,WC4B5BtH,gBA/BM,WACjB,IAAO9G,EAAa4G,IAAb5G,UAEP,OACI,cAAC,KAAD,CACIqN,cAAe,CAAEhP,YAAa,GAAIzB,SAAW,GAAI0Q,MAAO,GAAIC,SAAU,GAAIlT,MAAO,MACjFmT,SAAU,SAACtL,EAAD,OAAUuL,EAAV,EAAUA,UAAV,OAAyBzN,EAAUtD,SAASwF,GAAQ8D,OAAM,SAAA3L,GAAK,OAAIoT,EAAU,CAACpT,cACxFgU,iBAAqBC,KAAW,CAC5BjQ,YAAaiQ,OAAaC,WAC1B3R,SAAU0R,OAAaC,WACvBjB,MAAOgB,OAAaC,WAAWjB,QAC/BC,SAAUe,OAAaC,aAP/B,SAUK,gBAAGb,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAclT,EAA/B,EAA+BA,OAAQ+T,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACG,eAAC,KAAD,CAAMb,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,cAAC/E,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,0BAA0BgE,MAAM,OAAOgC,UAAU,WACzE,cAAC,GAAD,CAAanD,KAAK,cAAciG,YAAY,iBAC5C,cAAC,GAAD,CAAajG,KAAK,WAAWiG,YAAY,aACzC,cAAC,GAAD,CAAajG,KAAK,QAAQiG,YAAY,UACtC,cAAC,GAAD,CAAajG,KAAK,WAAWkG,KAAK,WAAWD,YAAY,aACzD,cAAC,KAAD,CACIjG,KAAK,QAAQmG,OAAQ,kBAAM,cAAC,GAAD,CAAkBvT,OAAQA,EAAOJ,WAEhE,cAACyN,EAAA,EAAD,CAAQ+D,UAAY2C,IAAYC,GAASd,EAAe/O,QAAS+O,EAAc5F,UAAQ,EAAC/C,QAAQ,WAAW+I,KAAK,SAASvE,OAAK,aCSnI1C,gBAlCE,WAEb,MAAgCF,IAAzB5G,EAAP,EAAOA,UAAWkE,EAAlB,EAAkBA,WAElB,OACI,cAAC2G,EAAA,EAAD,CAAS7D,UAAQ,EAACgE,UAAU,SAAStC,UAAQ,EAACkF,UAAU,WAAxD,SACI,eAAC1G,EAAA,EAAD,CAAWoB,MAAI,EAAf,UACI,eAACQ,EAAA,EAAD,CAAQ1B,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACiB,EAAA,EAAD,CAAOU,KAAK,UAAUhB,IAAI,mBAAmBC,IAAI,OAAOH,MAAO,CAACwD,aAAc,MADlF,kBAICjL,EAAU0O,WACP,qCACI,cAAC5F,EAAA,EAAD,CAAQ1B,GAAG,KAAKJ,UAAQ,EAAChC,QAAQ,2BACjC,cAAC8C,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAcqB,KAAK,OAAO3B,UAAQ,EAAvD,kCAKJ,qCACI,cAACc,EAAA,EAAD,CAAQW,QAAS,kBAAMvE,EAAWa,UAAU,cAAC,GAAD,MAAgB4D,KAAK,OAAO3B,UAAQ,EAAhF,oBAGA,cAACc,EAAA,EAAD,CAAQW,QAAS,kBAAMvE,EAAWa,UAAU,cAAC,GAAD,MAAmB4D,KAAK,OAAO3B,UAAQ,EAAnF,kC,mBChBT2H,GARU,SAAC,GAAqD,IAAD,IAAnD3H,gBAAmD,aAApChC,eAAoC,MAA3B,cAA2B,EAC1E,OACI,cAAC4J,GAAA,EAAD,CAAQ3F,QAAQ,EAAMjC,SAAUA,EAAhC,SACI,cAAC2F,EAAA,EAAD,CAAQ3H,QAASA,OCkBd6J,GAhBI,SAAChC,GAChB,MAAsBC,aAASD,EAAMhF,MAArC,mBAAOkF,EAAP,KAAcC,EAAd,KAEA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY7S,MAAO2S,EAAKG,WAAaH,EAAK3S,MAA1C,UACI,gCAAQwS,EAAMO,QAEd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAK3S,MAClB,cAAC0Q,GAAA,EAAD,CAAOrB,OAAK,EAACV,MAAM,MAAnB,SAA0BgE,EAAK3S,QAChC,SCtBFyU,GAAkB,CAC3B,CAACxG,KAAM,SAAUpJ,MAAO,UACxB,CAACoJ,KAAM,UAAWpJ,MAAO,WACzB,CAACoJ,KAAM,OAAQpJ,MAAO,QACtB,CAACoJ,KAAM,OAAQpJ,MAAO,QACtB,CAACoJ,KAAM,QAASpJ,MAAO,SACvB,CAACoJ,KAAM,SAAUpJ,MAAO,W,UC6Bb6P,GAvBO,SAAClC,GACnB,MAA+BC,aAASD,EAAMhF,MAA9C,mBAAOkF,EAAP,KAAcC,EAAd,KAAoBgC,EAApB,KAEA,OACI,eAAC/B,GAAA,EAAKC,MAAN,CAAY7S,MAAO2S,EAAKG,WAAaH,EAAK3S,MAA1C,UACI,gCAAQwS,EAAMO,QAEd,cAAC6B,GAAA,EAAD,CACIC,WAAS,EACTC,QAAWtC,EAAMsC,QACjBjQ,MAAU6N,EAAM7N,OAAS,KACzBiK,SAAY,SAACQ,EAAGyF,GAAJ,OAAUJ,EAAQK,SAASD,EAAElQ,QACzCoQ,OAAU,kBAAMN,EAAQO,YAAW,IACnCzB,YAAejB,EAAMiB,cAExBd,EAAKG,SAAWH,EAAK3S,MAClB,cAAC0Q,GAAA,EAAD,CAAOrB,OAAK,EAACV,MAAM,MAAnB,SAA0BgE,EAAK3S,QAChC,S,qBCJAmV,GAnBK,SAAC3C,GACjB,MAA+BC,aAASD,EAAMhF,MAA9C,mBAAOkF,EAAP,KAAcC,EAAd,KAAoBgC,EAApB,KAEA,OACI,eAAC/B,GAAA,EAAKC,MAAN,CAAY7S,MAAO2S,EAAKG,WAAaH,EAAK3S,MAA1C,UACI,cAAC,KAAD,uCACQ0S,GACAF,GAFR,IAGI4C,SAAa1C,EAAM7N,OAAS,IAAIuB,KAAKsM,EAAM7N,QAAW,KACtDiK,SAAY,SAAAjK,GAAK,OAAI8P,EAAQK,SAASnQ,OAEzC8N,EAAKG,SAAWH,EAAK3S,MAClB,cAAC0Q,GAAA,EAAD,CAAOrB,OAAK,EAACV,MAAM,MAAnB,SAA0BgE,EAAK3S,QAChC,S,UCoEAyM,gBAvEM,WACjB,IAAMnM,EAAU+U,eACT/L,EAAiBiD,IAAjBjD,cACAhD,EAAgEgD,EAAhEhD,eAAgBG,EAAgD6C,EAAhD7C,eAAgBjB,EAAgC8D,EAAhC9D,aAAchB,EAAkB8E,EAAlB9E,eAC9C5C,EAAM0T,eAAN1T,GAEP,EAAgC6P,mBAA8B,IAAIlO,GAAlE,mBAAOzB,EAAP,KAAiBqD,EAAjB,KAEM6O,EAAmBC,KAAW,CAChCxQ,MAAOwQ,OAAaC,SAAS,0BAC7BvQ,YAAasQ,OAAaC,SAAS,0BACnCxQ,SAAUuQ,OAAaC,SAAS,0BAChCtQ,KAAMqQ,OAAaC,SAAS,oBAAoBqB,WAChDzR,MAAOmQ,OAAaC,SAAS,0BAC7BrQ,KAAMoQ,OAAaC,SAAS,4BAmBhC,OAhBAtC,qBAAU,WACFhQ,GAAI4D,EAAa5D,GAAIV,MAAK,SAAAY,GAAQ,OAAIqD,EAAY,IAAI5B,EAAmBzB,SAC9E,CAACF,EAAI4D,IAcJhB,EAAuB,cAAC,GAAD,CAAkBmG,QAAQ,yBAEjD,eAAC6F,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,cAACrC,EAAA,EAAD,CAAQ9D,QAAQ,mBAAmBuG,KAAG,EAACvC,MAAM,SAC7C,cAAC,KAAD,CACAqF,iBAAoBA,EACpBwB,oBAAkB,EAACxC,cAAelR,EAAUqR,SAAU,SAAAtL,GAAM,OAlBpE,SAA0B/F,GACtB,GAAKA,EAASF,GAOV6E,EAAe3E,GAAUZ,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BuB,EAASF,YAP5D,CACb,IAAI4E,EAAW,2BACR1E,GADQ,IAEXF,GAAI6T,iBAERnP,EAAeE,GAAatF,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BiG,EAAY5E,SAYf8T,CAAiB7N,IAFjF,SAIK,gBAAGwL,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASb,EAA1B,EAA0BA,aAAcc,EAAxC,EAAwCA,MAAxC,OACG,eAAC,KAAD,CAAMb,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAAC,GAAD,CAAahG,KAAK,QAAQiG,YAAY,UACtC,cAAC,GAAD,CAAYkC,KAAM,EAAGlC,YAAY,cACjCjG,KAAK,gBACL,cAAC,GAAD,CAAesH,QAASL,GAAiBhB,YAAY,WACrDjG,KAAK,aACL,cAAC,GAAD,CAAaoI,gBAAkB,OAC/BpI,KAAK,OACLqI,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEX,cAACtH,EAAA,EAAD,CAAQ9D,QAAQ,mBAAmBuG,KAAG,EAACvC,MAAM,SAC7C,cAAC,GAAD,CAAa8E,YAAY,OACzBjG,KAAK,SACL,cAAC,GAAD,CAAaiG,YAAY,QACzBjG,KAAK,UACL,cAACC,EAAA,EAAD,CACIlJ,QAAS+O,EAAcvC,QAAQ,QAAQrD,UAAQ,EAACgG,KAAK,SAAS/I,QAAQ,SACtE6G,SAAU8B,IAAiBc,IAAUD,IAEzC,cAAC1G,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAc8D,QAAQ,QAAQ2C,KAAK,SAAS/I,QAAQ,uB,oBClElF8B,gBAAS,YAAqD,IAAtBxB,EAAqB,EAArBA,WAE5CJ,EAAgB0B,IAAhB1B,aAUP,OARA+G,qBAAU,WAIN,OAHI3G,GACAJ,EAAaG,mBAAmBC,GAE7B,WACHJ,EAAaqB,mBAElB,CAACrB,EAAcI,IAEd,qCACI,cAACuF,EAAA,EAAD,CACIG,UAAU,SACVjC,SAAS,MACT/B,UAAQ,EACRgC,MAAM,OACNvB,MAAO,CAAC4I,OAAQ,QALpB,SAOI,cAACvH,EAAA,EAAD,sCAEJ,eAAC+B,EAAA,EAAD,CAAS9B,UAAQ,EAACoC,UAAQ,EAA1B,UACQ,cAAC,KAAD,CAAQqC,SAAU,SAACtL,EAAD,OAAUoO,EAAV,EAAUA,UAAV,OACNpL,EAAasB,WAAWtE,GAAQ3G,MAAK,kBAAM+U,QAC/CjD,cAAe,CAAC7R,KAAM,IACtB6S,iBAAkBC,KAAW,CACzB9S,KAAO8S,OAAaC,aAJhC,SAOK,gBAAEZ,EAAF,EAAEA,aAAca,EAAhB,EAAgBA,QAASd,EAAzB,EAAyBA,aAAzB,OACG,cAAC,KAAD,CAAME,UAAU,UAAhB,SACI,cAAC,KAAD,CAAO/F,KAAK,OAAZ,SACK,SAACgF,GAAD,OACG,sBAAKpF,MAAO,CAACO,SAAS,YAAtB,UACI,cAAC2E,EAAA,EAAD,CAAQ1D,OAAQ0E,IAChB,kDACIG,YAAY,gEACZkC,KAAM,GACFnD,EAAME,OAHd,IAIIwD,WAAY,SAAA5G,GACM,UAAVA,EAAE7O,KAAmB6O,EAAE6G,UAGb,UAAV7G,EAAE7O,KAAoB6O,EAAE6G,WACxB7G,EAAEC,iBACF4E,GAAWd,oBAUnD,cAAC+C,GAAA,EAAQ3F,MAAT,UACK5F,EAAaC,SAASmF,KAAI,SAAApE,GAAO,OAC9B,eAACuK,GAAA,EAAD,WACA,cAACA,GAAA,EAAQC,OAAT,CAAgB/I,IAAKzB,EAAQ5H,OAAS,qBACtC,eAACmS,GAAA,EAAQnH,QAAT,WACI,cAACmH,GAAA,EAAQE,OAAT,CAAgBvJ,GAAImB,IAAMjB,GAAE,oBAAepB,EAAQtJ,UAAnD,SAAgEsJ,EAAQ7H,cACxE,cAACoS,GAAA,EAAQG,SAAT,UACI,gCAAMC,aAAoB3K,EAAQC,WAAlC,YAEJ,cAACsK,GAAA,EAAQK,KAAT,CAAcrJ,MAAO,CAACsJ,WAAW,YAAjC,SAA+C7K,EAAQ1K,YAP7C0K,EAAQjK,kBC/DxC+U,GAAqB,CACvB9P,OAAQ,mBAGN+P,GAAyB,CAC3BjJ,SAAU,WACVkJ,OAAQ,KACRC,KAAM,KACNvI,MAAO,OACPwI,OAAQ,OACRpI,MAAO,SAOIlC,gBAAU,YAAoD,IAAD,IAAlB3K,EAAkB,EAAlBA,SAEtD,EAA6EyK,IAAtEjD,cAAiB1C,EAAxB,EAAwBA,iBAAmBrC,EAA3C,EAA2CA,QAASuC,EAApD,EAAoDA,qBAEpD,OACI,eAAC0J,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,CAASnB,OAAK,EAACX,SAAS,MAAMtB,MAAO,CAAC4J,QAAS,KAA/C,UACKlV,EAASiF,aACN,cAAC2J,GAAA,EAAD,CAAOtD,MAAO,CAACO,SAAU,WAAYsJ,OAAO,IAAKH,MAAO,GAAII,IAAK,IAAKC,QAAM,EAACxI,MAAM,MAAMhE,QAAQ,cAErG,cAACiD,EAAA,EAAD,CAAON,IAAG,iCAA4BxL,EAAS4B,SAArC,QAAqDyL,OAAK,EAAC/B,MAAOuJ,KAC5E,cAACnG,EAAA,EAAD,CAASpD,MAAOwJ,GAAwBvH,OAAK,EAA7C,SACI,cAACvC,GAAA,EAAK2D,MAAN,UACI,cAAC3D,GAAA,EAAD,UACI,eAACA,GAAA,EAAKmC,QAAN,WACI,cAACR,EAAA,EAAD,CACIH,KAAK,OACL3D,QAAS7I,EAAS2B,MAClB2J,MAAO,CAACuB,MAAO,WAEnB,4BAAItG,kBAAOvG,EAAS8B,KAAQ,iBAC5B,0CAEI,iCACI,eAAC,IAAD,CAAMqJ,GAAE,8BAAenL,EAASmE,YAAxB,aAAe,EAAe1D,UAAtC,wBAAoDT,EAASmE,YAA7D,aAAoD,EAAejC,gCAS/F,cAACwM,EAAA,EAAD,CAASM,UAAQ,EAACpC,SAAS,SAA3B,SACK5M,EAASiE,OACN,qCACI,cAAC0H,EAAA,EAAD,CACIkB,MAAO7M,EAASiF,YAAc,QAAU,MACxCgK,QAAQ,OACR1B,OAAK,EACL1E,QAAS7I,EAASiF,YAAc,uBAAyB,iBACzDqH,QAAStH,EACTvC,QAASA,IAEb,cAACkJ,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAE,kBAAanL,EAASF,IAAM+M,MAAM,SAASoC,QAAQ,QAAQS,SAAU1P,EAASiF,YAAlG,6BAIAjF,EAAS8D,QACT,cAAC6H,EAAA,EAAD,CAAQlJ,QAASA,EAAS6J,QAASxH,EAAnC,+BAEA,cAAC6G,EAAA,EAAD,CAAQlJ,QAASA,EAASiN,SAAU1P,EAASiF,YAAaqH,QAASxH,EAAkB+H,MAAM,OAA3F,mCClETlC,gBAAS,YAAkD,IAAnB3K,EAAkB,EAAlBA,SACnD,OACI,eAAC0O,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAAS9B,SAAS,MAAlB,SACI,eAACmD,EAAA,EAAD,WACI,cAACA,EAAA,EAAKE,OAAN,CAAaxD,MAAO,EAApB,SACI,cAACoB,GAAA,EAAD,CAAMrB,KAAK,QAAQK,MAAM,OAAOnB,KAAK,WAEzC,cAACqE,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,SACI,4BAAIzM,EAAS6B,qBAIzB,cAAC6M,EAAA,EAAD,CAAS9B,UAAQ,EAAjB,SACI,eAACmD,EAAA,EAAD,CAAMuF,cAAc,SAApB,UACI,cAACvF,EAAA,EAAKE,OAAN,CAAaxD,MAAO,EAApB,SACI,cAACoB,GAAA,EAAD,CAAMnC,KAAK,WAAWc,KAAK,QAAQK,MAAM,WAE7C,cAACkD,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,SACR,+BACKlG,kBAAOvG,EAAS8B,KAAQ,gCAK7B,cAAC4M,EAAA,EAAD,CAAS9B,UAAQ,EAAjB,SACI,eAACmD,EAAA,EAAD,CAAMuF,cAAc,SAApB,UACI,cAACvF,EAAA,EAAKE,OAAN,CAAaxD,MAAO,EAApB,SACI,cAACoB,GAAA,EAAD,CAAMnC,KAAK,SAASc,KAAK,QAAQK,MAAM,WAE3C,cAACkD,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,SACI,iCAAOzM,EAASgC,MAAhB,KAAyBhC,EAAS+B,qBChC3C4I,gBAAS,YAA+E,IAAD,IAA1C3K,SAAa+D,EAA6B,EAA7BA,UAAWI,EAAkB,EAAlBA,KAChF,OAAIJ,EAGA,qCACI,eAAC2K,EAAA,EAAD,CACIG,UAAU,SACVvD,MAAO,CAAE4I,OAAQ,QACjBtH,SAAS,MACTmC,WAAS,EACTlE,UAAQ,EACRgC,MAAM,OANV,UAQK9I,EAAUwR,OARf,IAQ6C,IAArBxR,EAAUwR,OAAe,SAAW,SAR5D,YAUA,cAAC7G,EAAA,EAAD,CAAS9B,UAAQ,EAAjB,SACI,cAACqB,GAAA,EAAD,CAAMuH,SAAO,EAACC,SAAO,EAArB,SACM1R,EAAUoK,KAAK,SAAA1J,GAAQ,OACrB,eAACuG,GAAA,EAAD,CAAMM,MAAO,CAAEO,SAAU,YAAzB,UACKpH,EAAShE,YAAT,OAAsB0D,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM1D,WACzB,cAACmO,GAAA,EAAD,CACAtD,MAAO,CAAEO,SAAU,YACnBgB,MAAM,SACNwI,OAAO,QAHP,kBAQR,cAACvJ,EAAA,EAAD,CAAOU,KAAK,OAAOhB,IAAK/G,EAAStC,OAAS,qBAC1C,eAAC6I,GAAA,EAAKmC,QAAN,CAAcmI,cAAc,SAA5B,UACI,cAACtK,GAAA,EAAK2B,OAAN,CAAa1B,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,oBAAe1G,EAAShE,UAAhC,SAA8CgE,EAASvC,gBAE1DuC,EAASU,WACV,cAAC6F,GAAA,EAAK0K,MAAN,CAAYpK,MAAO,CAAEuB,MAAO,UAA5B,4BAhBwCpI,EAAShE,oBAjBnD,QC2BXkK,gBA3BS,WAEpB,IAAOnD,EAAiBiD,IAAjBjD,cACkBxH,EAAiEwH,EAAnFjF,iBAA4BmB,EAAuD8D,EAAvD9D,aAAchB,EAAyC8E,EAAzC9E,eAAgB2C,EAAyBmC,EAAzBnC,sBAC1DvF,EAAM0T,eAAN1T,GAOP,OALAgQ,qBAAU,WAEN,OADGhQ,GAAI4D,EAAa5D,GACb,kBAAMuF,OACd,CAACvF,EAAI4D,EAAc2B,IAEnB3C,IAAmB1C,EAAiB,cAAC,GAAD,CAAkB6I,QAAQ,gBAG7D,eAACkH,EAAA,EAAD,WACI,eAACA,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,UACI,cAAC,GAAD,CAAwBzM,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsBmJ,WAAYnJ,EAASF,QAE/C,cAACiQ,EAAA,EAAKE,OAAN,CAAaxD,MAAO,EAApB,SACI,cAAC,GAAD,CAAyBzM,SAAUA,YC1BpC,SAAS2V,KACpB,IACA,EAA4BhG,mBAAS,MAArC,mBAAOrR,EAAP,KAAegT,EAAf,KA0BA,OACI,qCACI,cAAC3E,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,yBACxB,cAAC6F,EAAA,EAAD,UACI,eAAC/C,EAAA,EAAOgD,MAAR,CAAciH,OAAO,IAArB,UACI,cAACjK,EAAA,EAAD,CAAQW,QA7BxB,WACIrP,IAAMkC,IAAI0W,uBAA6BhM,OAAM,SAAAmI,GAAG,OAAIxO,QAAQC,IAAIuO,EAAIlU,cA4BvB+K,QAAQ,YAAY0E,OAAK,EAACuI,SAAO,IAClE,cAACnK,EAAA,EAAD,CAAQW,QA1BxB,WACIrP,IAAMkC,IAAI0W,yBAA+BhM,OAAM,SAAAmI,GAAG,OAAIxO,QAAQC,IAAIuO,EAAIlU,cAyBvB+K,QAAQ,cAAc0E,OAAK,EAACuI,SAAO,IACtE,cAACnK,EAAA,EAAD,CAAQW,QAXxB,WACIrP,IAAMqC,KAAKuW,iBAAwB,IAAIhM,OAAM,SAAAmI,GAAG,OAAIV,EAAUU,OAUVnJ,QAAQ,mBAAmB0E,OAAK,EAACuI,SAAO,IAChF,cAACnK,EAAA,EAAD,CAAQW,QAxBxB,WACIrP,IAAMkC,IAAI0W,0BAAgChM,OAAM,SAAAmI,GAAG,OAAIxO,QAAQC,IAAIuO,EAAIlU,cAuBvB+K,QAAQ,eAAe0E,OAAK,EAACuI,SAAO,IACxE,cAACnK,EAAA,EAAD,CAAQW,QArBxB,WACIrP,IAAMkC,IAAI0W,0BAAgChM,OAAM,SAAAmI,GAAG,OAAIxO,QAAQC,IAAIuO,EAAIlU,cAoBtB+K,QAAQ,eAAe0E,OAAK,EAACuI,SAAO,IACzE,cAACnK,EAAA,EAAD,CAAQW,QAlBxB,WACIrP,IAAMkC,IAAI0W,2BAAiChM,OAAM,SAAAmI,GAAG,OAAIxO,QAAQC,IAAIuO,EAAIlU,cAiB5B+K,QAAQ,WAAW0E,OAAK,EAACuI,SAAO,SAGvExX,GACG,cAAC,GAAD,CAAkBA,OAAQA,OC5C1C,IAceyX,GAdE,WACb,OACI,eAACrH,EAAA,EAAD,CAASiD,aAAW,EAApB,UACI,eAAChF,EAAA,EAAD,CAAQN,MAAI,EAAZ,UACI,cAACwB,GAAA,EAAD,CAAMnC,KAAK,WADf,4DAIA,cAACgD,EAAA,EAAQsH,OAAT,UACI,cAACrK,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAc2K,SAAO,EAACjN,QAAQ,kCCQpD8B,gBAhBK,WAAO,IAAD,IACfhN,EAAe8M,IAAf9M,YACP,OACI,eAACoN,EAAA,EAAD,WACI,cAAC4B,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,iBACxB,cAAC8D,EAAA,EAAD,CAAQyC,KAAG,EAACnE,GAAG,KAAK4B,MAAM,MAAMhE,QAAO,UAAElL,EAAYO,aAAd,aAAE,EAAmB+X,WAC3D,UAAAtY,EAAYO,aAAZ,eAAmB2B,UAChB,eAAC6O,EAAA,EAAD,WACI,cAAC/B,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,cAAcgE,MAAM,SAC5C,sBAAMvB,MAAO,CAACoB,UAAW,OAAQwJ,aAAa,cAA9C,SAA8DvY,EAAYO,MAAM2B,mB,UCIrF8K,gBAZQ,WAEnB,IAAO5C,EAAc0C,IAAd1C,WACP,OACI,cAACoO,GAAA,EAAD,CAAOxN,KAAMZ,EAAWW,MAAMC,KAAMyN,QAASrO,EAAWC,WAAYwE,KAAK,OAAzE,SACI,cAAC2J,GAAA,EAAMhJ,QAAP,UACKpF,EAAWW,MAAMrJ,Y,UCH5BgX,GAAQ,CACV,CAACC,SAAS,gBAAiBC,KAAM,CAAC5X,IAAI,WACtC,CAAC2X,SAAS,cAAeC,KAAM,CAAC5X,IAAI,SACpC,CAAC2X,SAAS,iBAAkBC,KAAM,CAAC5X,IAAI,aAwD5BgM,gBArDW,WAEtB,IAAO7B,EAAgB2B,IAAhB3B,aACAnB,EAAkEmB,EAAlEnB,mBAAoBlB,EAA8CqC,EAA9CrC,QAASO,EAAqC8B,EAArC9B,kBAAmBD,EAAkB+B,EAAlB/B,eAEvD+I,qBAAU,WACNnI,EAAmBlB,EAAShG,YAC7B,CAACkH,EAAoBlB,IAMxB,OACI,cAAC+P,GAAA,EAAIC,KAAL,CAAUhU,QAASuE,EAAnB,SACI,eAAC+I,EAAA,EAAD,WACI,cAACA,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CAAQsC,QAAQ,OAAO5C,KAAK,WAAWxD,QAAS,iBAEpD,eAACkH,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,UACI,cAAC+J,GAAA,EAAD,CACIH,MAAOA,GACPK,KAAM,CAAE3H,WAAW,EAAM7C,UAAU,GACnCyK,YAAc,SAACnJ,EAAE9Q,GAAH,OAdV,SAAC8Q,EAAmB9Q,GACxCiL,EAAmBlB,EAAShG,SAAU4V,GAAM3Z,EAAKka,aAAuBL,KAAK5X,KAanCkY,CAAgBrJ,EAAE9Q,MAEhD,uBACA,cAACiR,GAAA,EAAKgB,MAAN,CAAYmI,YAAa,EAAzB,SACK/P,EAAeoH,KAAI,SAACnO,GAAD,OAChB,eAAC2N,GAAA,EAAD,CACI1C,GAAImB,IACJjB,GAAE,sBAAiBnL,EAASF,IAFhC,UAKI,cAACgM,EAAA,EAAD,CACIN,IAAG,iCAA4BxL,EAAS4B,SAArC,QACH0J,MAAO,CAACiE,UAAW,IAAKwH,UAAW,WAEvC,eAACpJ,GAAA,EAAKR,QAAN,WACI,cAACQ,GAAA,EAAKhB,OAAN,CAAakC,UAAU,SAAvB,SAAiC7O,EAAS2B,QAC1C,eAACgM,GAAA,EAAKqJ,KAAN,CAAWnI,UAAU,SAArB,UACI,8BAAMtI,kBAAO,IAAIjC,KAAKtE,EAAS8B,MAAO,YACtC,8BAAMyE,kBAAO,IAAIjC,KAAKtE,EAAS8B,MAAO,oBAVzC9B,EAASF,oBCd/B6K,gBA1BW,WAEtB,IAAO7B,EAAgB2B,IAAhB3B,aACArC,EAAqDqC,EAArDrC,QAASG,EAA4CkC,EAA5ClC,WAAYC,EAAgCiC,EAAhCjC,kBAAmBC,EAAagC,EAAbhC,UAE/C,OACI,cAAC0P,GAAA,EAAIC,KAAL,CAAUhU,QAASoE,EAAnB,SACI,eAACkJ,EAAA,EAAD,WACI,cAACA,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CACIsC,QAAQ,OACR5C,KAAK,OACLxD,QAAuB,IAAd/B,EAAA,kCAAsCL,QAAtC,IAAsCA,OAAtC,EAAsCA,EAASvE,aAA/C,wBAAyEuE,QAAzE,IAAyEA,OAAzE,EAAyEA,EAASvE,YAAlF,qBAEjB,cAAC6N,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,SACI,cAACkB,GAAA,EAAKgB,MAAN,CAAYmI,YAAa,EAAzB,SACKlQ,EAAWuH,KAAI,SAAA1H,GAAO,OACnB,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQhG,yB,UCKvCwW,I,OAlBY,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,WACvC,OACI,cAAC,KAAD,CACI3L,IAAK0L,EACL5L,MAAO,CAAC2J,OAAQ,IAAKxI,MAAO,QAE5B2K,mBAAoB,EACpBC,YAAa,EACbC,QAAQ,eACRC,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIT,EAAWS,Q,UCdlC,SAASC,GAAT,GAAiD,IAAnBC,EAAkB,EAAlBA,SAEnCC,EAAW,CACb7D,OAAQ,kBACRnG,YAAa,QACbiK,aAAc,MACdC,WAAY,MACZpJ,UAAW,SACXoG,OAAQ,KAONiD,EAASC,uBAAY,SAAAC,GAEvBN,EAASM,EAAcjK,KAAI,SAACxN,GAAD,OAAeY,OAAOC,OAAOb,EAAM,CAC1D2W,QAASe,IAAIC,gBAAgB3X,WAElC,CAACmX,IACJ,EAAoDS,aAAY,CAACL,WAA1DM,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,aAEpC,OACI,gDAASF,KAAT,IAAyBlN,MAAOoN,EAAY,2BAAOX,GAbtC,CACbhK,YAAa,UAY+DgK,EAA5E,UACI,qCAAWU,MACP,cAAC5K,GAAA,EAAD,CAAMnC,KAAK,SAASc,KAAK,SACzB,cAACG,EAAA,EAAD,CAAQ9D,QAAQ,wBCzBhC,IAgDe8P,GAhDY,SAAC,GAAoC,IAAnClW,EAAkC,EAAlCA,QAAS/B,EAAyB,EAAzBA,YAElC,EAA0BiP,mBAAc,IAAxC,mBAAOiJ,EAAP,KAAcd,EAAd,KACA,EAA8BnI,qBAA9B,mBAAOiI,EAAP,KAAgBT,EAAhB,KAeA,OANArH,qBAAU,WACN,OAAO,WACH8I,EAAM3V,SAAQ,SAACtC,GAAD,OAAe0X,IAAIQ,gBAAgBlY,EAAK2W,eAE3D,CAACsB,IAGA,eAAC7I,EAAA,EAAD,WACI,eAACA,EAAA,EAAKE,OAAN,CAAaxD,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQyC,KAAG,EAACvC,MAAM,OAAOhE,QAAQ,uBACjC,cAACgP,GAAD,CAAqBC,SAAUA,OAEnC,cAAC/H,EAAA,EAAKE,OAAN,CAAaxD,MAAO,IACpB,eAACsD,EAAA,EAAKE,OAAN,CAAaxD,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQyC,KAAG,EAACvC,MAAM,OAAOhE,QAAQ,0BAChC+P,GAASA,EAAMrD,OAAS,GACrB,cAAC,GAAD,CAAoB4B,WAAYA,EAAYD,aAAc0B,EAAM,GAAGtB,aAG3E,cAACvH,EAAA,EAAKE,OAAN,CAAaxD,MAAO,IACpB,eAACsD,EAAA,EAAKE,OAAN,CAAaxD,MAAO,EAApB,UACA,cAACE,EAAA,EAAD,CAAQyC,KAAG,EAACvC,MAAM,OAAOhE,QAAQ,8BAChC+P,GAASA,EAAMrD,OAAS,GACrB,qCACI,qBAAK9D,UAAU,cAAcnG,MAAO,CAACiE,UAAW,IAAKuJ,SAAS,YAC9D,eAACnN,EAAA,EAAOgD,MAAR,CAAciH,OAAQ,EAAtB,UACI,cAACjK,EAAA,EAAD,CAAQlJ,QAASA,EAAS6J,QAjC9C,WACQsL,GACAA,EAAQmB,mBAAmBC,QAAO,SAAAC,GAAI,OAAIvY,EAAYuY,OA+BCrN,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQ+D,SAAUjN,EAAS6J,QAAS,kBAAMwL,EAAS,KAAKzL,KAAK,uBCiCtE1B,gBAvEO,SAAC,GAAqB,IAAD,EAAnBlE,EAAmB,EAAnBA,QAEpB,EAAoGgE,IAA9F3B,aAAeoQ,EAArB,EAAqBA,cAAexY,EAApC,EAAoCA,YAAaiG,EAAjD,EAAiDA,UAAWlE,EAA5D,EAA4DA,QAAS1B,EAArE,EAAqEA,aAAcC,EAAnF,EAAmFA,YACnF,EAAwC2O,oBAAS,GAAjD,mBAAOwJ,EAAP,KAAqBC,EAArB,KACA,EAA4BzJ,mBAAS,IAArC,mBAAO0J,EAAP,KAAeC,EAAf,KAgBA,OACI,cAAC9C,GAAA,EAAIC,KAAL,UACI,eAAC1G,EAAA,EAAD,WACI,eAACA,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,UACI,cAACE,EAAA,EAAD,CAAQsC,QAAQ,OAAO5C,KAAK,QAAQxD,QAAQ,WAC3CqQ,GACG,cAACvN,EAAA,EAAD,CAAQsD,QAAQ,QAAQ1B,OAAK,EAAC1E,QAASsQ,EAAe,SAAW,YAC7D7M,QAAS,kBAAM8M,GAAiBD,SAI5C,cAACpJ,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,SACK0M,EACG,cAAC,GAAD,CAAoBzY,YA3BxC,SAA2BC,GACvBD,EAAYC,GAAMvB,MAAK,kBAAMga,GAAgB,OA0BuB3W,QAASkE,IAE7D,cAACgH,GAAA,EAAKgB,MAAN,CAAYmI,YAAa,EAAzB,mBACKrQ,EAAQW,cADb,aACK,EAAgB+G,KAAI,SAAAhH,GAAK,OACtB,eAACwG,GAAA,EAAD,WACI,cAAC7B,EAAA,EAAD,CAAON,IAAKrE,EAAMjI,MACjBga,GACG,eAACvN,EAAA,EAAOgD,MAAR,CAActB,OAAK,EAACuI,OAAQ,EAA5B,UACI,cAACjK,EAAA,EAAD,CACI4B,OAAK,EACLV,MAAM,QACNhE,QAAQ,OACR6C,KAAM,OAASvE,EAAMrH,GACrB4P,SAAUvI,EAAME,OAChB5E,QAAS4W,IAAW,OAASlS,EAAMrH,IAAM2C,EACzC6J,QAAS,SAAAkB,GAAC,OAtCtD,SAA4BrG,EAAcqG,GACtC8L,EAAU9L,EAAE+L,cAAc7N,MAC1B3K,EAAaoG,GAoCyCqS,CAAmBrS,EAAOqG,MAE5C,cAAC7B,EAAA,EAAD,CACI4B,OAAK,EACLV,MAAM,MACNR,KAAK,QACL5J,QAAS4W,IAAWlS,EAAMrH,IAAM2C,EAChC6J,QAAS,SAAAkB,GAAC,OAxCtD,SAA4BrG,EAAcqG,GACtC8L,EAAU9L,EAAE+L,cAAc7N,MAC1B1K,EAAYmG,GAsC0CsS,CAAkBtS,EAAOqG,IACvCkC,SAAUvI,EAAME,OAChBqE,KAAMvE,EAAMrH,UApBjBqH,EAAMrH,mBCblC6K,gBAtBQ,SAAC,GAAsB,IAArBlE,EAAoB,EAApBA,QAEfqC,EAAgB2B,IAAhB3B,aAEAuN,EAAQ,CACV,CAACC,SAAW,QAASzE,OAAQ,kBAAM,cAAC2E,GAAA,EAAIC,KAAL,8BACnC,CAACH,SAAW,SAAUzE,OAAQ,kBAAM,cAAC,GAAD,CAAepL,QAASA,MAC5D,CAAC6P,SAAW,SAAUzE,OAAQ,kBAAM,cAAC,GAAD,MACpC,CAACyE,SAAW,YAAazE,OAAQ,kBAAM,cAAC,GAAD,MACvC,CAACyE,SAAW,YAAazE,OAAQ,kBAAM,cAAC,GAAD,OAG3C,OACI,cAAC2E,GAAA,EAAD,CACIE,KAAM,CAACrJ,OAAO,EAAMd,UAAU,GAC9BmN,aAAa,QACbrD,MAAOA,EACPM,YAAa,SAACnJ,EAAG9Q,GAAJ,OAAaoM,EAAa7B,aAAavK,EAAKka,mB,oBCMtDjM,gBA3BO,SAAC,GAAqB,IAApBlE,EAAmB,EAAnBA,QACpB,OACI,cAACiI,EAAA,EAAD,UACI,eAACqB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,SACI,cAACzB,GAAA,EAAK2D,MAAN,UACI,eAAC3D,GAAA,EAAD,WACI,cAACA,GAAA,EAAKc,MAAN,CAAYC,QAAM,EAACS,KAAK,QAAQhB,IAAM/E,EAAQtE,OAAS,qBACvD,cAAC6I,GAAA,EAAKmC,QAAN,CAAcmI,cAAc,SAA5B,SACI,cAAC3I,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAASpC,EAAQvE,uBAKjD,eAAC6N,EAAA,EAAKE,OAAN,CAAaxD,MAAO,EAApB,UACI,eAACkN,GAAA,EAAUhL,MAAX,CAAiBiH,OAAQ,EAAzB,UACI,cAAC+D,GAAA,EAAD,CAAW1I,MAAM,YAAYlO,MAAO0D,EAAQrB,iBAC5C,cAACuU,GAAA,EAAD,CAAW1I,MAAM,YAAYlO,MAAO0D,EAAQgB,oBAEhD,cAACmS,GAAA,EAAD,IACA,cAAC,GAAD,CAAcnT,QAASA,eCQ5BkE,gBA5BK,WAEhB,IAAMlK,EAAY+S,eAAZ/S,SACAqI,EAAgB2B,IAAhB3B,aACApC,EAAsDoC,EAAtDpC,eAAgBQ,EAAsC4B,EAAtC5B,YAAaT,EAAyBqC,EAAzBrC,QAASQ,EAAgB6B,EAAhB7B,aAS5C,OAPA6I,qBAAU,WAEN,OADA5I,EAAYzG,GACL,WACHwG,EAAa,MAElB,CAACC,EAAazG,EAAUwG,IAEvBP,EAAuB,cAAC,GAAD,CAAkBmC,QAAQ,uBAEjD,cAACkH,EAAA,EAAD,UACI,cAACA,EAAA,EAAKE,OAAN,CAAaxD,MAAO,GAApB,SACKhG,GACG,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,c,UCtBlC,SAASoT,GAAT,GAAgE,IAA9BC,EAA6B,EAAxCC,UAAyBC,EAAe,8BACtDzH,EAAe9H,IAA5B5G,UAAa0O,WAEpB,OACI,cAAC,KAAD,2BACQyH,GADR,IAEInI,OAAQ,SAACnB,GAAD,OAAW6B,EAAa,cAACuH,EAAD,eAAepJ,IAAY,cAAC,KAAD,CAAUvF,GAAG,UCgDrER,oBA1Cf,WACA,IAAMsP,EAAWC,eACjB,EAAiCzP,IAA1B9M,EAAP,EAAOA,YAAakG,EAApB,EAAoBA,UAUpB,OARAiM,qBAAU,WACJnS,EAAYF,MACdoG,EAAUwE,UAAU8R,SAAS,kBAAMxc,EAAY6K,kBAE/C7K,EAAY6K,iBAEb,CAAC7K,EAAakG,IAEZlG,EAAY4K,UAGb,qCACA,cAAC,IAAD,CAAgBsD,SAAS,eAAeuO,iBAAe,IACvD,cAAC,GAAD,IACE,cAAC,KAAD,CAAOC,KAAK,IAAIN,UAAWO,GAAUlP,OAAK,IAC1C,cAAC,KAAD,CACAiP,KAAM,QACNxI,OAAU,kBACR,qCACF,cAAC,EAAD,IACA,cAAC9G,EAAA,EAAD,CAAWO,MAAO,CAACoB,UAAW,OAA9B,SACE,eAAC,KAAD,WACE,cAACmN,GAAD,CAAczO,OAAK,EAACiP,KAAK,cAAcN,UAAWQ,KAClD,cAACV,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWS,KAChD,cAACX,GAAD,CAAiCQ,KAAM,CAAC,kBAAmB,eAAgBN,UAAWU,IAAnER,EAAStb,KAC5B,cAACkb,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWW,KACpD,cAACb,GAAD,CAAiCQ,KAAK,UAAUN,UAAWpE,IAAxCsE,EAAStb,KAC5B,cAAC,KAAD,CAA0B0b,KAAK,gBAAgBN,UAAWY,IAA9CV,EAAStb,KACrB,cAAC,KAAD,CAAOob,UAAWhE,mBApBO,cAAC,GAAD,CAAkBlN,QAAQ,sBCjB9C+R,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB1b,MAAK,YAAkD,IAA/C2b,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCNC,SAASO,KACpB,IAAQC,EAAanB,eAAbmB,SAMR,OAJAvL,qBAAU,WACN5H,OAAOoT,SAAS,EAAG,KACpB,CAACD,IAEG,KCIJ,IAAM7c,GAAU+c,eAEvBC,IAAS3J,OACP,cAACtH,EAAakR,SAAd,CAAuB1Y,MAAOrF,EAA9B,SAEI,eAAC,KAAD,CAAQc,QAASA,GAAjB,UACE,cAAC4c,GAAD,IACA,cAAC,GAAD,SAINM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.66fbdfb9.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor (data: T, pagination: Pagination){\r\n        this.data= data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNmber = 1, pageSize =2) {\r\n        this.pageNumber = pageNmber;\r\n        this.pageSize = pageSize;\r\n        \r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { store } from '../stores/store';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { PaginatedResult } from '../models/pagination';\r\n\r\nconst sleep = (delay:number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n} \r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\n//makes sure we send our token with every request when we have a token in our commonStore\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response =>{\r\n        if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n        \r\n        const pagination = response.headers['pagination'];\r\n        if (pagination) {\r\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>\r\n        }\r\n        return response;\r\n},(error: AxiosError)=> {\r\n    const {data, status, config} = error.response!;\r\n    switch(status){\r\n        case 400:\r\n            if(typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            } \r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401: toast.error('unauthorized'); break;\r\n        case 404: \r\n            history.push('/not-found');\r\n            break;\r\n        case 500: \r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst repsonseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(repsonseBody),\r\n    post: <T>(url: string, body : {} ) => axios.post<T>(url,body).then(repsonseBody),\r\n    put: <T>(url: string, body : {} ) => axios.put<T>(url,body).then(repsonseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(repsonseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(repsonseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`), \r\n    create: (activity: ActivityFormValues) => requests.post<void>(`/activities`, activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\r\n    attend: (id:string) => requests.post<void>(`activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username : string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData , {\r\n            headers: {'Content-type' : 'multipart/form-data'}\r\n        })\r\n    } ,\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\r\n    updateFollowing: (username:string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username : string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username : string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities , \r\n    Account ,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\n//populates all the properties that it can into our activity\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n    Object.assign(this, init);\r\n}}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n} ","import { User } from './user';\r\n\r\nexport interface Profile {\r\n    username : string;\r\n    displayName : string;\r\n    image ?: string;\r\n    bio ?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user : User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { store } from \"./store\";\r\nimport { Profile } from './../models/profile';\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore{\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true );\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams : PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all': \r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing': \r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost': \r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate': \r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) =>{\r\n            if(key === 'startDate'){\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value)\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a , b) => \r\n        a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) =>{\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string] : Activity[]})\r\n        )\r\n    }\r\n\r\n//actions\r\n//asynchronous code goes in try catch block synchronous outside\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error){\r\n        console.log(error);\r\n        this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    //helper method\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if(activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try{\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            }catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id:string) =>{\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity : Activity) =>{\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find( x => x.username === activity.hostUsername );\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee  = new Profile(user!);\r\n        try{\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() =>{\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error){\r\n            console.log(error);\r\n            }\r\n        }\r\n    \r\n    updateActivity = async (activity : ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() =>{\r\n                if(activity.id){\r\n                    let updatedActivity = {...this.getActivity(activity.id),...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async ( id: string ) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() =>{\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() =>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter( a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity! )\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id , this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction( () => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile : Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings : Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = this.activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate)\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab : any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if(store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username : string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile  =  await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loadingProfile = false)\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file:Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    //this line sets the current main photo to false\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    //sets the main photo\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo : Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username !== username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--; \r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading =  false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username:string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() =>{\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false)\r\n        }\r\n    }\r\n}\r\n\r\n","import { User, UserFormValues } from './../models/user';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { store } from './store';\r\nimport { history } from '../..';\r\nexport default class UserStore {\r\n    user : User | null = null;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !! this.user;\r\n    }\r\n\r\n    login = async (creds : UserFormValues ) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try{\r\n            const user = await agent.Account.current();\r\n            runInAction( () => this.user = user );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds : UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image : string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from './commonStore';\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\nimport CommentStore from './commentStore';\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore() ,\r\n    commonStore: new CommonStore() ,\r\n    userStore: new UserStore() ,\r\n    modalStore: new ModalStore() ,\r\n    profileStore: new ProfileStore() ,\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\n//hook that we're making use of\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { ServerError } from \"../models/ServerError\";\r\nimport { makeAutoObservable, reaction } from 'mobx';\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        \r\n        //1st param: what we wanna react to. 2nd : can pass the token and do something\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        //dont need this line of code if we're doing it in reaction in the constructor\r\n        //if (token) window.localStorage.setItem('jwt',token);\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n}","import { makeAutoObservable } from 'mobx';\r\n\r\ninterface Modal {\r\n    open : boolean;\r\n    body : JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal : Modal = {\r\n        open : false,\r\n        body : null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { ChatComment } from './../models/comment';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { store } from './store';\r\n\r\nexport default class CommentStore {\r\n\r\n    comments: ChatComment[] = [];\r\n    hubConnection : HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    creatHubConnection = (activityId : string) => {\r\n        if(store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityid=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log(\"Error establishing the connection\", error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments : ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt+ 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment : ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment) //places new comments to the start of the array\r\n                });\r\n            });\r\n        }\r\n    }\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping Connection', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {//name of methods should match on client and SignalR\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from './../stores/store';\r\n\r\nconst NavBar = () => {\r\n    \r\n    const {userStore : { user, logout}} = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img style={{marginRight:'10px'}} src=\"/assets/logo.png\" alt=\"logo\"/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\">\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\">\r\n                </Menu.Item>\r\n                <Menu.Item header>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity'/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src = {user?.image || '/assets/user.png'} avatar spaced=\"right\" />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logoout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default observer(NavBar)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from './../../../app/stores/store';\r\n\r\nconst ActivityFilters = () => {\r\n\r\n    const {activityStore: {predicate, setPredicate}} = useStore(); \r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width:'100%', marginTop:25}}>\r\n                <Header icon='filter' attached color='teal' content='filters' />\r\n                <Menu.Item \r\n                    content=\"All Activities\"\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\r\n                value= {predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityFilters)\r\n\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent } from 'react'\r\nimport { Button, Reveal } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n    profile : Profile;\r\n} \r\n\r\nconst FollowButton = ({profile} : Props) => {\r\n\r\n    const{ profileStore, userStore } = useStore();\r\n    const{ updateFollowing, loading } = profileStore;\r\n\r\n    //to not display when viewing our own profile\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow( e : SyntheticEvent, username : string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n    \r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style ={{width:'100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style ={{width:'100%'}}>\r\n                <Button \r\n                    fluid\r\n                    basic \r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'} \r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                    />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n}\r\n\r\nexport default observer(FollowButton)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    profile : Profile;\r\n}\r\n\r\nconst ProfileCard = ({profile} : Props) => {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || `/assets/user.png`} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>Bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content>\r\n                <Icon name='user' />\r\n                {profile.followersCount} Followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileCard)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Image, List, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../app/models/profile'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n    attendees : Profile[];\r\n}\r\n\r\nconst ActivityListItemAttendee = ( { attendees } : Props ) => {\r\n\r\n    const styles = {\r\n        borderColor:'orange',\r\n        borderWidth:3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            { attendees.map( attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`} >\r\n                            <Image \r\n                                size='mini' \r\n                                circular src={ attendee.image || '/assets/user.png'} \r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee}/>\r\n                    </Popup.Content>\r\n                </Popup>\r\n                \r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityListItemAttendee)\r\n","import { format } from 'date-fns'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n    activity : Activity;\r\n}\r\n\r\nconst ActivityListItem = ( {activity} : Props ) => {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && \r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || 'assets/user.png'}/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`activities/${activity.id}`}>{activity.title}</Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by <Link to={`profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange' >\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green' >\r\n                                        You are going this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name=\"clock\" /> {format(activity.date! , 'dd MMMM yyyy h:mm aa')}\r\n                    <Icon name=\"marker\" /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default ActivityListItem\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nconst ActivityList = () => {\r\n    const {activityStore} = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group,activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>{group}</Header>\r\n                        {activities.map(activity => (\r\n                            <ActivityListItem key={activity.id} activity={activity}/>\r\n                        ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityList)\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nconst ActivityDashboard = () => {\r\n\r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext () {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(activityRegistry.size <= 1)\r\n        loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    // if(activityStore.loadingInitial && !loadingNext) return <LoadingComponent content='Loading activities...' />\r\n    return (\r\n            <Grid stackable>\r\n                <Grid.Column width='10'>\r\n                    {/* pagination is an object so we need to cast that into boolean by !! */}\r\n                    {activityStore.loadingInitial && !loadingNext ? (\r\n                        <>\r\n                            <ActivityListItemPlaceholder />\r\n                            <ActivityListItemPlaceholder /> \r\n                        </>\r\n                    ) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='6'>\r\n                    <ActivityFilters />\r\n                </Grid.Column>\r\n                <Grid.Column width='10'>\r\n                    <Loader active={loadingNext} />\r\n                </Grid.Column>\r\n            </Grid>\r\n    )\r\n}\r\n\r\nexport default observer (ActivityDashboard)\r\n","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder : string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nconst MyTextInput = (props: Props) => {\r\n    const [field, meta] = useField(props.name); \r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error }>\r\n            <label>{props.label}</label>\r\n            {/* spreading input field an props */}\r\n            <input {...field} {...props}/> \r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null \r\n            }\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MyTextInput\r\n","import React from 'react'\r\nimport { ErrorMessage, Form, Formik } from 'formik';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport { useStore } from './../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\nconst LoginForm = () => {\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' type='password' placeholder='Password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid/>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(LoginForm)\r\n","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface Props{\r\n    errors: any;\r\n}\r\nconst ValidationErrors = ({errors}: Props) => {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}\r\n\r\nexport default ValidationErrors\r\n","import React from 'react'\r\nimport { ErrorMessage, Form, Formik } from 'formik';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport { useStore } from './../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nconst RegisterForm = () => {\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', username : '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => setErrors({error}))}\r\n            validationSchema = { Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' type='password' placeholder='Password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={ !isValid || !dirty || isSubmitting } loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(RegisterForm)\r\n","import React from 'react'\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom';\r\nimport { useStore } from './../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nconst HomePage = () => {\r\n\r\n    const {userStore, modalStore} = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}}/>\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivites' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                    </>\r\n                )}\r\n                \r\n            </Container>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(HomePage)\r\n","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content: string;\r\n}\r\nconst LoadingComponent = ({inverted=true, content= 'Loading ...'}: Props ) => {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}\r\n\r\nexport default LoadingComponent\r\n\r\n","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder : string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nconst MyTextArea = (props: Props) => {\r\n    const [field, meta] = useField(props.name); \r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error }>\r\n            <label>{props.label}</label>\r\n            {/* spreading input field an props */}\r\n            <textarea {...field} {...props}/> \r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null \r\n            }\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MyTextArea\r\n","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder : string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nconst MySelectInput = (props: Props) => {\r\n    const [field, meta, helpers] = useField(props.name); \r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error }>\r\n            <label>{props.label}</label>\r\n            {/* spreading input field an props */}\r\n            <Select \r\n                clearable\r\n                options = {props.options}\r\n                value = { field.value || null }\r\n                onChange = {(e, d) => helpers.setValue(d.value)}\r\n                onBlur = {() => helpers.setTouched(true)}\r\n                placeholder = {props.placeholder}\r\n            /> \r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null \r\n            }\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MySelectInput\r\n","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nconst MyDateInput = (props: Partial<ReactDatePickerProps>) => {\r\n    const [field, meta, helpers] = useField(props.name!); \r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error }>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected = {(field.value && new Date(field.value)) || null}\r\n                onChange = {value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null \r\n            }\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MyDateInput\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams, Link, useHistory } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\nimport {v4 as uuid} from 'uuid';\r\n\r\nconst ActivityForm = () => {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity, loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>( new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('This field is required'),\r\n        description: Yup.string().required('This field is required'),\r\n        category: Yup.string().required('This field is required'),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required('This field is required'),\r\n        city: Yup.string().required('This field is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity : ActivityFormValues){\r\n        if (!activity.id){\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else{\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='loading activity ...' />\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity details' sub color='teal'/>\r\n            <Formik \r\n            validationSchema = {validationSchema} \r\n            enableReinitialize initialValues={activity} onSubmit={values => handleFormSubmit(values)}\r\n            >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty })=> (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name=\"title\" placeholder=\"Title\" />\r\n                        <MyTextArea rows={3} placeholder='Description' \r\n                        name='description'/>\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' \r\n                        name='category'/>\r\n                        <MyDateInput placeholderText = 'Date'\r\n                        name='date'\r\n                        showTimeSelect\r\n                        timeCaption='time'\r\n                        dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location details' sub color='teal'/>\r\n                        <MyTextInput placeholder='City'\r\n                        name='city'/>\r\n                        <MyTextInput placeholder='Venue'\r\n                        name='venue'/>\r\n                        <Button \r\n                            loading={isSubmitting} floated='right' positive type='submit' content='Submit'\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                        />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel'/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityForm)\r\n","import { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from './../../../app/stores/store';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form, Field, FieldProps } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId : string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId} : Props) {\r\n    \r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.creatHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                    <Formik onSubmit={(values, {resetForm}) => \r\n                                commentStore.addComment(values).then(() => resetForm())}\r\n                            initialValues={{body: ''}}\r\n                            validationSchema={Yup.object({\r\n                                body : Yup.string().required()\r\n                            })}\r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position:'relative'}}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea \r\n                                                placeholder='Enter your comment (Enter to submit, SHIFT+Enter for new line'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if (e.key === 'Enter' && e.shiftKey){\r\n                                                    return;//for newline\r\n                                                    }\r\n                                                    if (e.key === 'Enter' && !e.shiftKey){\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                        <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text style={{whiteSpace:'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n                    ))}\r\n                    \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n\r\n    const{ activityStore : {updateAttendance , loading, cancelActivityToggle}} = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absolute', zIndex:'5', left: -14, top: 20}} ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date! , 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by \r\n                                    <strong> \r\n                                        <Link to={`/profiles/${activity.host?.username}`}> {activity.host?.displayName}\r\n                                        </Link>\r\n                                    </strong> \r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Canel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right' disabled={activity.isCancelled}>\r\n                        Manage Event\r\n                        </Button>\r\n                    </>\r\n                    ) : activity.isGoing ? (\r\n                        <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                    ) : (\r\n                        <Button loading={loading} disabled={activity.isCancelled} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n                {format(activity.date! , 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity : Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ( {activity : { attendees, host }} : Props ) {\r\n    if(!attendees) return null;\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    { attendees.map( attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username && \r\n                                <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>\r\n                            }\r\n                        <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`/profiles/${attendee.username}`}>{ attendee.displayName }</Link>\r\n                            </Item.Header>\r\n                            {attendee.following && \r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                            }\r\n                        </Item.Content>\r\n                    </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nconst ActivityDetails = () => {\r\n\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if(id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if(loadingInitial || !activity) return <LoadingComponent content=\"loading app\" />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails)\r\n","import React from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary content='Return to activity page' />\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from './../../app/stores/store';\r\n\r\nconst ServerError = () => {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content=\"Server Error\" />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px', overflowWrap:'break-word'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default observer (ServerError)\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from './../../stores/store';\r\n\r\nconst ModalContainer = () => {\r\n\r\n    const {modalStore} = useStore();\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini' >\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default observer(ModalContainer)\r\n","import { format } from 'date-fns'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from 'semantic-ui-react'\r\nimport { UserActivity } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nconst panes = [\r\n    {menuItem:'Future Events', pane: {key:'future'}},\r\n    {menuItem:'Past Events', pane: {key:'past'}},\r\n    {menuItem:'Hosting Events', pane: {key:'hosting'}}\r\n]\r\n\r\nconst ProfileActivities = () => {\r\n\r\n    const {profileStore} = useStore();\r\n    const {loadUserActivities, profile, loadingActivities, userActivities} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile])\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'}  />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true}}\r\n                        onTabChange= {(e,data) => handleTabChange(e,data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image \r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{minHeight: 100, objectFit: 'cover'}}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileActivities)\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileCard from './ProfileCard';\r\n\r\nconst ProfileFollowings = () => {\r\n\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following` } />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileFollowings)\r\n","import React from 'react'\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview :string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nconst PhotoWidgetCropper = ({imagePreview, setCropper}: Props ) => {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            //enforcing square images\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetCropper\r\n","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles : (files : any) => void; // can use type File too, but for ambiguity we use any\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eeee',\r\n        borderRadius: '5px',\r\n        paddingTop: '3em',\r\n        textAlign: 'center' as 'center',\r\n        height: 200,\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        // Do something with the files\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles }>\r\n            <input {...getInputProps()} />\r\n                <Icon name='upload' size='huge' />\r\n                <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto : (file : Blob) => void\r\n}\r\n\r\nconst PhototUploadWidget = ({loading, uploadPhoto} : Props) => {\r\n\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    //to cleanup the image from client memory (createObjectURL from PhotoWidgetDropzone)\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])    \r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n            <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n            {files && files.length > 0 &&\r\n                <>\r\n                    <div className='img-preview' style={{minHeight: 200, overflow:'hidden'}} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>\r\n            }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default PhototUploadWidget\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react'\r\nimport PhototUploadWidget from '../../app/common/imageUpload/PhototUploadWidget'\r\nimport { Photo, Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n    profile : Profile;\r\n}\r\n\r\nconst ProfilePhotos = ({profile}:Props) => {\r\n\r\n    const{profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto }} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e : SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto( photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhototUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic \r\n                                                color='green' \r\n                                                content='Main' \r\n                                                name={'main' + photo.id} \r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button \r\n                                                basic \r\n                                                color='red' \r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePhotos)","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileActivities from './ProfileActivities'\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport ProfilePhotos from './ProfilePhotos'\r\n\r\ninterface Props {\r\n    profile : Profile;\r\n}\r\n\r\nconst ProfileContent = ({profile}: Props) => {\r\n\r\n    const{profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem : 'About', render :() => <Tab.Pane>About Content</Tab.Pane>},\r\n        {menuItem : 'Photos', render :() => <ProfilePhotos profile={profile}/ >},\r\n        {menuItem : 'Events', render :() => <ProfileActivities />},\r\n        {menuItem : 'Followers', render :() => <ProfileFollowings />},\r\n        {menuItem : 'Following', render :() => <ProfileFollowings />},\r\n    ]\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default observer(ProfileContent)\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    profile : Profile;\r\n}\r\n\r\nconst ProfileHeader = ({profile}:Props) => {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={ profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4} >\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount}  />\r\n                        <Statistic label='Following' value={profile.followingCount}  />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileHeader)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\n\r\nconst ProfilePage = () => {\r\n\r\n    const{username} = useParams<{username : string}>();\r\n    const{profileStore} = useStore();\r\n    const{loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePage)\r\n","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest} : Props) {\r\n    const {userStore : {isLoggedIn}} = useStore();\r\n\r\n    return(\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from './../../features/activities/details/ActivityDetails';\r\nimport TestErrors from './../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from './../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from './../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\nconst location = useLocation();\r\nconst {commonStore, userStore} = useStore();\r\n\r\nuseEffect(() => {\r\n  if (commonStore.token) {\r\n    userStore.getUser().finally( () => commonStore.setAppLoaded());\r\n  } else {\r\n    commonStore.setAppLoaded();\r\n  }\r\n}, [commonStore, userStore])\r\n\r\nif (!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer position='bottom-right' hideProgressBar />\r\n    <ModalContainer />\r\n      <Route path='/' component={HomePage} exact />\r\n      <Route \r\n      path={'/(.+)'} \r\n      render = {() => (\r\n        <>\r\n      <NavBar />\r\n      <Container style={{marginTop: '7em'}}>\r\n        <Switch>\r\n          <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n          <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n          <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n          <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n          <PrivateRoute key={location.key} path='/errors' component={TestErrors} />\r\n          <Route key={location.key} path='/server-error' component={ServerError} />\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n      </Container>\r\n        </>\r\n      )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/styles.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    {/* <React.StrictMode> */}\r\n      <Router history={history}>\r\n        <ScrollToTop />\r\n        <App />\r\n      </Router>\r\n    {/* </React.StrictMode> */}\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}